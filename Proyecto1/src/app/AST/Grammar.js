/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,18],$V2=[1,19],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,24],$V7=[1,25],$V8=[1,31],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,30],$Vd=[1,29],$Ve=[1,32],$Vf=[1,33],$Vg=[2,5,22,25,26,27,30,33,41,42,54,62,66,67,68,72,73,74,78,106],$Vh=[1,48],$Vi=[1,58],$Vj=[1,59],$Vk=[1,45],$Vl=[1,46],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[1,67],$Vu=[1,66],$Vv=[1,69],$Vw=[1,65],$Vx=[1,75],$Vy=[1,87],$Vz=[1,85],$VA=[1,86],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[11,24,34,41,44,46,81,82,83,84,85,86,87,88,89,90,91,92,93,94,110],$VN=[2,125],$VO=[1,103],$VP=[1,104],$VQ=[1,105],$VR=[1,112],$VS=[1,113],$VT=[11,24,34,37,41,43,44,46,55,81,82,83,84,85,86,87,88,89,90,91,92,93,94,110],$VU=[1,124],$VV=[1,123],$VW=[1,126],$VX=[2,121],$VY=[1,157],$VZ=[1,160],$V_=[24,44,46],$V$=[1,165],$V01=[11,24],$V11=[1,168],$V21=[1,176],$V31=[1,172],$V41=[1,173],$V51=[1,174],$V61=[1,175],$V71=[2,5,22,23,25,26,27,30,33,41,42,43,54,62,66,67,68,72,73,74,78,81,95,97,98,99,100,101,102,103,106],$V81=[2,5,22,25,26,27,30,33,41,42,54,62,65,66,67,68,72,73,74,78,106],$V91=[1,194],$Va1=[11,24,34,41,44,46,81,83,87,88,89,90,91,92,93,94,110],$Vb1=[11,24,34,41,44,46,81,83,84,86,87,88,89,90,91,92,93,94,110],$Vc1=[11,24,34,41,44,46,87,88,89,90,91,92,93,94,110],$Vd1=[11,24,34,41,44,46,91,92,93,94,110],$Ve1=[1,204],$Vf1=[1,206],$Vg1=[41,46],$Vh1=[1,210],$Vi1=[1,209],$Vj1=[1,211],$Vk1=[11,24,37,39,41,43,46,76,77],$Vl1=[1,214],$Vm1=[76,77],$Vn1=[24,46],$Vo1=[1,234],$Vp1=[44,46],$Vq1=[1,241],$Vr1=[1,246],$Vs1=[1,264],$Vt1=[1,278],$Vu1=[11,24,37,43,46],$Vv1=[24,81,82,83,84,85,86,87,88,89,90,91,92,93,94],$Vw1=[41,72,73];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"If":8,"Pushear":9,"asignacion":10,";":11,"While":12,"DoWhile":13,"For":14,"Switch":15,"Console":16,"funcion":17,"Type":18,"llamadaFuncion":19,"ForIn":20,"ForOf":21,"GRAFICAR":22,"(":23,")":24,"BREAK":25,"CONTINUE":26,"RETURN":27,"ternario":28,"Expr":29,"ID":30,"++":31,"--":32,"LET":33,":":34,"tipo":35,"corchetes":36,"=":37,"corchetesVacios":38,"{":39,"atributosType":40,"}":41,"CONST":42,"[":43,"]":44,"masCorchetes":45,",":46,"corcheteFinal":47,"NUMBER":48,"STRING":49,"BOOLEAN":50,"VOID":51,"accesos":52,"+=":53,"CONSOLE":54,".":55,"LOG":56,"ListaConsole":57,"accesosCorchetes":58,"PUSH":59,"Length":60,"LENGTH":61,"IF":62,"BloqueInstrucciones":63,"Else":64,"ELSE":65,"WHILE":66,"DO":67,"SWITCH":68,"BloqueCase":69,"Default":70,"Case":71,"CASE":72,"DEFAULT":73,"FOR":74,"declaracion_for":75,"IN":76,"OF":77,"FUNCTION":78,"parametros":79,"parametro":80,"-":81,"**":82,"+":83,"*":84,"%":85,"/":86,"<":87,"<=":88,">":89,">=":90,"==":91,"!=":92,"&&":93,"||":94,"!":95,"F":96,"DECIMAL":97,"ENTERO":98,"CADENA":99,"CADENASIM":100,"TRUE":101,"FALSE":102,"NULL":103,"paramsExp":104,"acceso":105,"TYPE":106,"decla_atr_type":107,"atr_type":108,"atribType":109,"?":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:";",22:"GRAFICAR",23:"(",24:")",25:"BREAK",26:"CONTINUE",27:"RETURN",30:"ID",31:"++",32:"--",33:"LET",34:":",37:"=",39:"{",41:"}",42:"CONST",43:"[",44:"]",46:",",48:"NUMBER",49:"STRING",50:"BOOLEAN",51:"VOID",53:"+=",54:"CONSOLE",55:".",56:"LOG",58:"accesosCorchetes",59:"PUSH",61:"LENGTH",62:"IF",65:"ELSE",66:"WHILE",67:"DO",68:"SWITCH",72:"CASE",73:"DEFAULT",74:"FOR",76:"IN",77:"OF",78:"FUNCTION",81:"-",82:"**",83:"+",84:"*",85:"%",86:"/",87:"<",88:"<=",89:">",90:">=",91:"==",92:"!=",93:"&&",94:"||",95:"!",97:"DECIMAL",98:"ENTERO",99:"CADENA",100:"CADENASIM",101:"TRUE",102:"FALSE",103:"NULL",106:"TYPE",110:"?"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,4],[6,2],[6,2],[6,3],[6,3],[6,2],[6,3],[6,3],[6,1],[7,8],[7,8],[7,9],[7,6],[7,7],[7,5],[7,5],[7,3],[7,8],[7,8],[7,7],[7,5],[36,3],[36,2],[38,3],[38,2],[45,3],[45,1],[47,3],[47,2],[35,1],[35,1],[35,1],[35,1],[35,1],[10,4],[10,4],[10,3],[10,5],[10,3],[16,7],[57,3],[57,1],[9,7],[9,6],[60,4],[60,3],[8,6],[64,2],[64,2],[64,0],[12,5],[13,7],[15,8],[69,2],[69,1],[71,4],[70,3],[70,0],[14,8],[14,8],[20,7],[21,7],[75,4],[75,2],[75,4],[75,2],[63,3],[63,2],[17,10],[17,8],[17,9],[17,7],[79,3],[79,1],[80,4],[80,3],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[96,3],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,2],[96,2],[96,2],[96,3],[96,1],[52,2],[52,1],[105,2],[105,3],[19,4],[19,3],[104,3],[104,1],[18,6],[107,3],[107,1],[108,3],[40,3],[40,1],[109,3],[28,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        let nodo_eof = new NodoGraphviz("node_"+nodoActual , '[label="EOF"];\n', []);
        nodoActual++;        
        let nodo_init = new NodoGraphviz("node_"+nodoActual , '[label="Init"];\n', [$$[$0-1].id, nodo_eof.id]);
        nodoActual++;
        listaNodos.push(nodo_eof);
        listaNodos.push(nodo_init);

        console.log(listaNodos);
        let graph = "";
        for(let i = 0; i < listaNodos.length; i ++){
            graph += listaNodos[i].id + listaNodos[i].label;
        }
        let punteros = "";
        for(let i = 0; i < listaNodos.length ; i++){
            for(let j = 0; j < listaNodos[i].apuntadores.length ; j++){
                punteros += listaNodos[i].id + " -> " + listaNodos[i].apuntadores[j] + ";\n";
            }
        }
        console.log(graph + "\n" + punteros);
        nodoActual = 0;
        listaNodos = [];
        return $$[$0-1];
    
break;
case 2:

        let nodo_instrucciones = new NodoGraphviz("node_"+nodoActual , '[label="Instrucciones"];\n', [$$[$0-1].id]);
        nodoActual++;
        let nodo_instr = new NodoGraphviz("node_"+nodoActual , '[label="Instruccion"];\n', [$$[$0].id]);
        nodoActual++;
        let nodo_instrucciones2 = new NodoGraphviz("node_"+nodoActual , '[label="Instrucciones"];\n', [ nodo_instrucciones.id, nodo_instr.id ]);
        nodoActual++;

        listaNodos.push(nodo_instrucciones2);        
        listaNodos.push(nodo_instrucciones);
        listaNodos.push(nodo_instr);
        this.$ = nodo_instrucciones2;
    
break;
case 3:

        let nodo_declaracion = new NodoGraphviz("node_"+nodoActual , '[label="Instruccion"];\n', [$$[$0].id]);
        listaNodos.push(nodo_declaracion);
        nodoActual++;
        this.$ = nodo_declaracion;    
    
break;
case 4:

        listaNodos.push($$[$0]);
    
break;
case 5: case 8: case 9:

        listaNodos.push($$[$0]);        
    
break;
case 7:

        listaNodos.push($$[$0-1]);        
    
break;
case 11: case 12: case 13:

        listaNodos.push($$[$0]);            
    
break;
case 14:

        listaNodos.push($$[$0-1]);
    
break;
case 18:

        let paraGraf = new NodoGraphviz("node_"+nodoActual , '[label="("];\n', [] );
        nodoActual++;        
        let parcGraf = new NodoGraphviz("node_"+nodoActual , '[label=")"];\n', [] );
        nodoActual++;                
        let instGraf = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-3]+'"];\n', [] );
        nodoActual++;
        let resGraf = new NodoGraphviz("node_"+nodoActual , '[label="GraficarTS"];\n', [instGraf.id ,paraGraf.id, parcGraf.id] );
        nodoActual++;                
        listaNodos.push(resGraf);
        listaNodos.push(instGraf);        
        listaNodos.push(paraGraf);
        listaNodos.push(parcGraf);
        this.$ = resGraf;        
    
break;
case 19:

        let instBreak = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(instBreak);
        this.$ = instBreak;            
    
break;
case 20:

        let instCont = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(instCont);
        this.$ = instCont;        
    
break;
case 21:

        let instRet3 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-2]+'"];\n', [] );
        nodoActual++;
        let resReturn3 = new NodoGraphviz("node_"+nodoActual , '[label="Return"];\n', [instRet3.id , $$[$0-1].id]);
        nodoActual++;                
        listaNodos.push(instRet3);
        listaNodos.push($$[$0-1]);
        listaNodos.push(resReturn3);
        this.$ = resReturn3;           
    
break;
case 22:

        let instRet2 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-2]+'"];\n', [] );
        nodoActual++;
        let resReturn = new NodoGraphviz("node_"+nodoActual , '[label="Return"];\n', [instRet2.id , $$[$0-1].id]);
        nodoActual++;                
        listaNodos.push(instRet2);
        listaNodos.push($$[$0-1]);
        listaNodos.push(resReturn);
        this.$ = resReturn;   
    
break;
case 23:

        let instRet = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(instRet);
        this.$ = instRet;        
    
break;
case 24:

        let idInc = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-2]+'"];\n', [] );
        nodoActual++;            
        let masmasInc = new NodoGraphviz("node_"+nodoActual , '[label="++"];\n', [] );
        nodoActual++;        
        let resIncMas = new NodoGraphviz("node_"+nodoActual , '[label="Incremento"];\n', [idInc.id,masmasInc.id] );
        nodoActual++;        
        listaNodos.push(resIncMas);        
        listaNodos.push(idInc);
        listaNodos.push(masmasInc);
        this.$ = resIncMas;        
    
break;
case 25:

        let idDecr = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-2]+'"];\n', [] );
        nodoActual++;            
        let menmenInc = new NodoGraphviz("node_"+nodoActual , '[label="--"];\n', [] );
        nodoActual++;        
        let resDecMen = new NodoGraphviz("node_"+nodoActual , '[label="Decremento"];\n', [idDecr.id,menmenInc.id] );
        nodoActual++;        
        listaNodos.push(resDecMen);        
        listaNodos.push(idDecr);
        listaNodos.push(menmenInc);
        this.$ = resDecMen;
    
break;
case 26:
 
       // var error_sin = new Error_(this._$.first_line, this._$.first_column, 'Sintactico', yytext);
       // errores.push(error_sin);
    
break;
case 27:

        //Nodo LET
        let aptLet1 = new NodoGraphviz("node_"+nodoActual , '[label="let"];\n', [] );
        nodoActual++;
        //Nodo ID
        let aptId1 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-6]+'"];\n', [] );
        nodoActual++;
        //Nodo ":"
        let aptdsptExp1 = new NodoGraphviz("node_"+nodoActual , '[label=":"];\n', []);
        nodoActual++;
        //Nodo Tipo
        let aptTipoExp1 = new NodoGraphviz("node_"+nodoActual , '[label="tipo"];\n', [$$[$0-4].id]);
        nodoActual++;        
        //Nodo "="
        let aptigExp1 = new NodoGraphviz("node_"+nodoActual , '[label="="];\n', []);
        nodoActual++;
        //Nodo EXP
        let corchDec1 = new NodoGraphviz("node_"+nodoActual , '[label="corchetes"];\n', [$$[$0-3].id] );
        nodoActual++; 

        //Nodo EXP
        let corchVac1 = new NodoGraphviz("node_"+nodoActual , '[label="corchetesVacios"];\n', [] );
        nodoActual++; 

        //Nodo Declaracion
        let apt1 = [aptLet1.id , aptId1.id ,aptdsptExp1.id, aptTipoExp1.id, corchDec1.id, aptigExp1.id, corchVac1.id]; //Hijos de declaracion
        let dc1 = new NodoGraphviz("node_"+nodoActual , '[label="declaracion"];\n', apt1 );
        nodoActual++;

        //Ingresar nodos en el orden que fueron creados
        listaNodos.push(aptLet1);
        listaNodos.push(aptId1);
        listaNodos.push(aptdsptExp1);
        listaNodos.push(aptTipoExp1);
        listaNodos.push(corchDec1);
        listaNodos.push(aptigExp1);        
        listaNodos.push(corchVac1);

        this.$ = dc1;              
    
break;
case 28:

        //Nodo LET
        let aptLet2 = new NodoGraphviz("node_"+nodoActual , '[label="let"];\n', [] );
        nodoActual++;
        //Nodo ID
        let aptId2 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-6]+'"];\n', [] );
        nodoActual++;
        //Nodo ":"
        let aptdsptExp2 = new NodoGraphviz("node_"+nodoActual , '[label=":"];\n', []);
        nodoActual++;
        //Nodo Tipo
        let aptTipoExp2 = new NodoGraphviz("node_"+nodoActual , '[label="tipo"];\n', [$$[$0-4].id]);
        nodoActual++;        
        //Nodo "="
        let aptigExp2 = new NodoGraphviz("node_"+nodoActual , '[label="="];\n', []);
        nodoActual++;
        //Nodo EXP
        let corchDec2 = new NodoGraphviz("node_"+nodoActual , '[label="corchetes"];\n', [$$[$0-3].id] );
        nodoActual++;        
        //Nodo Declaracion
        let apt2 = [aptLet2.id , aptId2.id ,aptdsptExp2.id, aptTipoExp2.id, corchDec2.id, aptigExp2.id, $$[$0-1].id]; //Hijos de declaracion
        let dc2 = new NodoGraphviz("node_"+nodoActual , '[label="declaracion"];\n', apt2 );
        nodoActual++;

        //Ingresar nodos en el orden que fueron creados
        listaNodos.push(aptLet2);
        listaNodos.push(aptId2);
        listaNodos.push(aptdsptExp2);
        listaNodos.push(aptTipoExp2);
        listaNodos.push(corchDec2);
        listaNodos.push(aptigExp2);        
        listaNodos.push($$[$0-1]);

        //Retornar declaracion
        this.$ = dc2;        
    
break;
case 29:

        //Nodo LET
        let aptLet3 = new NodoGraphviz("node_"+nodoActual , '[label="let"];\n', [] );
        nodoActual++;
        //Nodo ID
        let aptId3 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-7]+'"];\n', [] );
        nodoActual++;
        //Nodo ":"
        let aptdsptExp3 = new NodoGraphviz("node_"+nodoActual , '[label=":"];\n', []);
        nodoActual++;
        //Nodo Tipo
        let aptTipoExp3 = new NodoGraphviz("node_"+nodoActual , '[label="tipo"];\n', [$$[$0-5].id]);
        nodoActual++;        
        //Nodo "="
        let aptigExp3 = new NodoGraphviz("node_"+nodoActual , '[label="="];\n', []);
        nodoActual++;

        //Nodo "{"
        let aptllaveaExp3 = new NodoGraphviz("node_"+nodoActual , '[label="{"];\n', []);
        nodoActual++;
        //Nodo "}"
        let aptllavecExp3 = new NodoGraphviz("node_"+nodoActual , '[label="}"];\n', []);
        nodoActual++;

        let apt3 = [aptLet3.id , aptId3.id ,aptdsptExp3.id, aptTipoExp3.id, aptigExp3.id, aptllaveaExp3.id, $$[$0-2].id, aptllavecExp3.id]; //Hijos de declaracion
        let dc3 = new NodoGraphviz("node_"+nodoActual , '[label="declaracion"];\n', apt3 );
        nodoActual++;

        //Ingresar nodos en el orden que fueron creados
        listaNodos.push(aptLet3);
        listaNodos.push(aptId3);
        listaNodos.push(aptdsptExp3);
        listaNodos.push(aptTipoExp3);
        listaNodos.push(aptigExp3);        
        listaNodos.push(aptllaveaExp3);
        listaNodos.push($$[$0-2]);
        listaNodos.push(aptllavecExp3);

        //Retornar declaracion
        this.$ = dc3;        
    
break;
case 30:

        //Nodo LET
        let aptLet4 = new NodoGraphviz("node_"+nodoActual , '[label="let"];\n', [] );
        nodoActual++;
        //Nodo ID
        let aptId4 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-4]+'"];\n', [] );
        nodoActual++;
        //Nodo ":"
        let aptdsptExp4 = new NodoGraphviz("node_"+nodoActual , '[label=":"];\n', []);
        nodoActual++;
        //Nodo Tipo
        let aptTipoExp4 = new NodoGraphviz("node_"+nodoActual , '[label="tipo"];\n', [$$[$0-2].id]);
        nodoActual++;
        //Nodo Corchetes
        let aptCorchExp4 = new NodoGraphviz("node_"+nodoActual , '[label="Corchetes"];\n', [$$[$0-1].id]);
        nodoActual++;        
                      
        //Nodo Declaracion
        let apt4 = [aptLet4.id , aptId4.id ,aptdsptExp4.id, aptTipoExp4.id, aptCorchExp4.id]; //Hijos de declaracion
        let dc4 = new NodoGraphviz("node_"+nodoActual , '[label="declaracion"];\n', apt4 );
        nodoActual++;

        //Ingresar nodos en el orden que fueron creados
        listaNodos.push(aptLet4);
        listaNodos.push(aptId4);
        listaNodos.push(aptdsptExp4);
        listaNodos.push(aptTipoExp4);
        listaNodos.push(aptCorchetesExp4);        

        //Retornar declaracion
        this.$ = dc4;                
    
break;
case 31:

        //Nodo LET
        let aptLet5 = new NodoGraphviz("node_"+nodoActual , '[label="let"];\n', [] );
        nodoActual++;
        //Nodo ID
        let aptId5 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-5]+'"];\n', [] );
        nodoActual++;
        //Nodo ":"
        let aptdsptExp5 = new NodoGraphviz("node_"+nodoActual , '[label=":"];\n', []);
        nodoActual++;
        //Nodo Tipo
        let aptTipoExp5 = new NodoGraphviz("node_"+nodoActual , '[label="tipo"];\n', [$$[$0-3].id]);
        nodoActual++;        
        //Nodo "="
        let aptigExp5 = new NodoGraphviz("node_"+nodoActual , '[label="="];\n', []);
        nodoActual++;
        //Nodo EXP
        //let aptExp5 = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-1].id] );
        //nodoActual++;        
        //Nodo Declaracion
        let apt5 = [aptLet5.id , aptId5.id ,aptdsptExp5.id, aptTipoExp5.id, aptigExp5.id, $$[$0-1].id]; //Hijos de declaracion
        let dc5 = new NodoGraphviz("node_"+nodoActual , '[label="declaracion"];\n', apt5 );
        nodoActual++;

        //Ingresar nodos en el orden que fueron creados
        listaNodos.push(aptLet5);
        listaNodos.push(aptId5);
        listaNodos.push(aptdsptExp5);
        listaNodos.push(aptTipoExp5);
        listaNodos.push(aptigExp5);        
//        listaNodos.push(aptExp5);
        listaNodos.push($$[$0-1]);
       // listaNodos.push(dc5);

        //Retornar declaracion
        this.$ = dc5;
    
break;
case 32:

        //Nodo LET
        let aptLet6 = new NodoGraphviz("node_"+nodoActual , '[label="let"];\n', [] );
        nodoActual++;
        //Nodo ID
        let aptId6 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-3]+'"];\n', [] );
        nodoActual++;
        //Nodo ":"
        let aptdsptExp6 = new NodoGraphviz("node_"+nodoActual , '[label=":"];\n', []);
        nodoActual++;
        //Nodo Tipo
        let aptTipoExp6 = new NodoGraphviz("node_"+nodoActual , '[label="tipo"];\n', [$$[$0-1].id]);
        nodoActual++;              
        //Nodo Declaracion
        let apt6 = [aptLet6.id , aptId6.id ,aptdsptExp6.id, aptTipoExp6.id]; //Hijos de declaracion
        let dc6 = new NodoGraphviz("node_"+nodoActual , '[label="declaracion"];\n', apt6 );
        nodoActual++;

        //Ingresar nodos en el orden que fueron creados
        listaNodos.push(aptLet5);
        listaNodos.push(aptId5);
        listaNodos.push(aptdsptExp5);
        listaNodos.push(aptTipoExp5);
       // listaNodos.push(dc6);

        //Retornar declaracion
        this.$ = dc6;        
    
break;
case 33:
 
        //Nodo LET
        let aptLet7 = new NodoGraphviz("node_"+nodoActual , '[label="let"];\n', [] );
        nodoActual++;
        //Nodo ID
        let aptId7 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-3]+'"];\n', [] );
        nodoActual++;
        //Nodo "="
        let aptigExp7 = new NodoGraphviz("node_"+nodoActual , '[label="="];\n', []);
        nodoActual++;
        //Nodo EXP
//        let aptExp7 = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-1].id] );
//        nodoActual++;        
        //Nodo Declaracion
        let apt7 = [aptLet7.id , aptId7.id , aptigExp7.id, $$[$0-1].id]; //Hijos de declaracion
        let dc7 = new NodoGraphviz("node_"+nodoActual , '[label="declaracion"];\n', apt7 );
        nodoActual++;

        //Ingresar nodos en el orden que fueron creados
        listaNodos.push(aptLet7);
        listaNodos.push(aptId7);
        listaNodos.push(aptigExp7);        
       // listaNodos.push(aptExp7);
        listaNodos.push($$[$0-1]);
       // listaNodos.push(dc7);

        //Retornar declaracion
        this.$ = dc7;
    
break;
case 34:

        //Nodo LET
        let aptLet8 = new NodoGraphviz("node_"+nodoActual , '[label="let"];\n', [] );
        nodoActual++;
        //Nodo ID
        let aptId8 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        //Nodo Declaracion
        let apt8 = [aptLet8.id , aptId8.id ]; //Hijos de declaracion
        let dc8 = new NodoGraphviz("node_"+nodoActual , '[label="declaracion"];\n', apt8);
        nodoActual++;

        //Ingresar nodos en el orden que fueron creados
        listaNodos.push(aptLet8);
        listaNodos.push(aptId8);
      //  listaNodos.push(dc8);

        //Retornar declaracion
        this.$ = dc8;         
    
break;
case 36:

        //Nodo LET
        let aptLet9 = new NodoGraphviz("node_"+nodoActual , '[label="const"];\n', [] );
        nodoActual++;
        //Nodo ID
        let aptId9 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-6]+'"];\n', [] );
        nodoActual++;
        //Nodo ":"
        let aptdsptExp9 = new NodoGraphviz("node_"+nodoActual , '[label=":"];\n', []);
        nodoActual++;
        //Nodo Tipo
        let aptTipoExp9 = new NodoGraphviz("node_"+nodoActual , '[label="tipo"];\n', [$$[$0-4].id]);
        nodoActual++;        
        //Nodo "="
        let aptigExp9 = new NodoGraphviz("node_"+nodoActual , '[label="="];\n', []);
        nodoActual++;
        //Nodo EXP
        let corchDec9 = new NodoGraphviz("node_"+nodoActual , '[label="corchetes"];\n', [$$[$0-3].id] );
        nodoActual++;        
        //Nodo Declaracion
        let apt9 = [aptLet9.id , aptId9.id ,aptdsptExp9.id, aptTipoExp9.id, corchDec9.id, aptigExp9.id, $$[$0-1].id]; //Hijos de declaracion
        let dc9 = new NodoGraphviz("node_"+nodoActual , '[label="declaracion"];\n', apt9 );
        nodoActual++;

        //Ingresar nodos en el orden que fueron creados
        listaNodos.push(aptLet9);
        listaNodos.push(aptId9);
        listaNodos.push(aptdsptExp9);
        listaNodos.push(aptTipoExp9);
        listaNodos.push(corchDec9);
        listaNodos.push(aptigExp9);        
        listaNodos.push($$[$0-1]);

        //Retornar declaracion
        this.$ = dc9;        

    
break;
case 37:

        //Nodo CONST
        let aptLet11 = new NodoGraphviz("node_"+nodoActual , '[label="const"];\n', [] );
        nodoActual++;
        //Nodo ID
        let aptId11 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-5]+'"];\n', [] );
        nodoActual++;
        //Nodo ":"
        let aptdsptExp11 = new NodoGraphviz("node_"+nodoActual , '[label=":"];\n', []);
        nodoActual++;
        //Nodo Tipo
        let aptTipoExp11 = new NodoGraphviz("node_"+nodoActual , '[label="tipo"];\n', [$$[$0-3].id]);
        nodoActual++;        
        //Nodo "="
        let aptigExp11 = new NodoGraphviz("node_"+nodoActual , '[label="="];\n', []);
        nodoActual++;
        //Nodo EXP
  //      let aptExp11 = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-1].id] );
  //      nodoActual++;        
        //Nodo Declaracion
        let apt11 = [aptLet11.id , aptId11.id ,aptdsptExp11.id, aptTipoExp11.id, $$[$0-1].id,  aptExp11.id]; //Hijos de declaracion
        let dc11 = new NodoGraphviz("node_"+nodoActual , '[label="declaracion"];\n', apt11 );
        nodoActual++;

        //Ingresar nodos en el orden que fueron creados
        listaNodos.push(aptLet11);
        listaNodos.push(aptId11);
        listaNodos.push(aptdsptExp11);
        listaNodos.push(aptTipoExp11);
        listaNodos.push(aptigExp11);        
        //listaNodos.push(aptExp11);
        listaNodos.push($$[$0-1]);
      //  listaNodos.push(dc11);

        //Retornar declaracion
        this.$ = dc11;        
    
break;
case 38:

        //Nodo CONST
        let aptLet12 = new NodoGraphviz("node_"+nodoActual , '[label="const"];\n', [] );
        nodoActual++;
        //Nodo ID
        let aptId12 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-3]+'"];\n', [] );
        nodoActual++;
        //Nodo "="
        let aptigExp12 = new NodoGraphviz("node_"+nodoActual , '[label="="];\n', []);
        nodoActual++;
        //Nodo EXP
        //let aptExp12 = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-1].id] );
        //nodoActual++;        
        //Nodo Declaracion
        let apt12 = [aptLet12.id , aptId12.id , aptigExp12.id, $$[$0-1].id]; //Hijos de declaracion
        let dc12 = new NodoGraphviz("node_"+nodoActual , '[label="declaracion"];\n', apt12 );
        nodoActual++;

        //Ingresar nodos en el orden que fueron creados
        listaNodos.push(aptLet12);
        listaNodos.push(aptId12);
        listaNodos.push(aptigExp12);        
//        listaNodos.push(aptExp12);
        listaNodos.push($$[$0-1]);
   //     listaNodos.push(dc12);

        //Retornar declaracion
        this.$ = dc12;        
    
break;
case 39:

        let Corchetes = new NodoGraphviz("node_"+nodoActual , '[label="Corchetes"];\n', [$$[$0-2].id]);
        nodoActual++;

        let corchIzq2 = new NodoGraphviz("node_"+nodoActual , '[label="["];\n', [] );
        nodoActual++;
        let corchDer2 = new NodoGraphviz("node_"+nodoActual , '[label="]"];\n', [] );
        nodoActual++;                
        let corchs2 = new NodoGraphviz("node_"+nodoActual , '[label="corchetes"];\n', [corchIzq2.id, corchDer2.id]);
        nodoActual++;        
        listaNodos.push(corchIzq2);
        listaNodos.push(corchDer2);

        let resCorch = new NodoGraphviz("node_"+nodoActual , '[label="Corchetes"];\n', [ Corchetes.id, corchs2.id ]);
        nodoActual++;       

        listaNodos.push(resCorch);
        listaNodos.push(Corchetes);        
        listaNodos.push(corchs2);

        this.$ = resCorch;                
    
break;
case 40:

        let corchIzq = new NodoGraphviz("node_"+nodoActual , '[label="["];\n', [] );
        nodoActual++;
        let corchDer = new NodoGraphviz("node_"+nodoActual , '[label="]"];\n', [] );
        nodoActual++;                
        let corchs = new NodoGraphviz("node_"+nodoActual , '[label="corchetes"];\n', [corchIzq.id, corchDer.id]);
        nodoActual++;        
        listaNodos.push(corchIzq);
        listaNodos.push(corchDer);
        listaNodos.push(corchs);
        this.$ = corchs;        
    
break;
case 47:

        let tNum = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0]+'"];\n', [] );
        listaNodos.push(tNum);
        nodoActual++;        
        this.$ = tNum;        
    
break;
case 48:

        let tStr = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0]+'"];\n', [] );
        listaNodos.push(tStr);
        nodoActual++;        
        this.$ = tStr;        
    
break;
case 49:

        let tBool = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0]+'"];\n', [] );
        listaNodos.push(tBool);
        nodoActual++;        
        this.$ = tBool;        
    
break;
case 50:

        let tVoid = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0]+'"];\n', [] );
        listaNodos.push(tVoid);
        nodoActual++;        
        this.$ = tVoid;        
    
break;
case 51:

        let tId = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0]+'"];\n', [] );
        listaNodos.push(tId);
        nodoActual++;        
        this.$ = tId;        
    
break;
case 52:

        let asigId1 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-3]+'"];\n', [] );
        nodoActual++;        
        let asigIg1 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;                        
        let asigCorchVac = new NodoGraphviz("node_"+nodoActual , '[label="corchetesVacios"];\n', [] );
        nodoActual++;                                
        let resAsig1 = new NodoGraphviz("node_"+nodoActual , '[label="Asignacion"];\n', [asigId1.id , $$[$0-2].id, asigIg1.id, asigCorchVac.id]);
        nodoActual++;                

        listaNodos.push(asigId1);
        listaNodos.push($$[$0-2]);
        listaNodos.push(asigIg1);
        listaNodos.push(asigCorchVac);
        this.$ = resAsig1;        
    
break;
case 53:

        let asigId2 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-3]+'"];\n', [] );
        nodoActual++;        
        let asigIg2 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;                        
        let resAsig2 = new NodoGraphviz("node_"+nodoActual , '[label="Asignacion"];\n', [asigId2.id , $$[$0-2].id, asigIg2.id, $$[$0].id]);
        nodoActual++;                

        listaNodos.push(asigId2);
        listaNodos.push($$[$0-2]);
        listaNodos.push(asigIg2);
        listaNodos.push($$[$0]);
        this.$ = resAsig2;
    
break;
case 54:

        let asigId3 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-2]+'"];\n', [] );
        nodoActual++;        
        let asigIg3 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;                
        let resAsig3 = new NodoGraphviz("node_"+nodoActual , '[label="Concat"];\n', [asigId3.id , asigIg3.id, $$[$0].id]);
        nodoActual++;        


        listaNodos.push(asigId3);
        listaNodos.push(asigIg3);
        listaNodos.push($$[$0]);
        this.$ = resAsig3;
    
break;
case 55:

        let asigId4 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-4]+'"];\n', [] );
        nodoActual++;        
        let asigIg4 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-3]+'"];\n', [] );
        nodoActual++;
        let paraAsig4 = new NodoGraphviz("node_"+nodoActual , '[label="{"];\n', [] );
        nodoActual++;
        let parcAsig4 = new NodoGraphviz("node_"+nodoActual , '[label="}"];\n', [] );
        nodoActual++;                                
        let resAsig4 = new NodoGraphviz("node_"+nodoActual , '[label="Asignacion"];\n', [asigId4.id , asigIg4.id, paraAsig4.id, $$[$0-1].id, parcAsig4.id]);
        nodoActual++;        
        listaNodos.push(asigId4);
        listaNodos.push(asigIg4);
        listaNodos.push(paraAsig4);
        listaNodos.push($$[$0-1]);
        listaNodos.push(parcAsig4);        
        this.$ = resAsig4;        
    
break;
case 56:

        let asigId5 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-2]+'"];\n', [] );
        nodoActual++;        
        let asigIg5 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;                
        let resAsig5 = new NodoGraphviz("node_"+nodoActual , '[label="Asignacion"];\n', [asigId5.id , asigIg5.id, $$[$0].id]);
        nodoActual++;        
        listaNodos.push(asigId5);
        listaNodos.push(asigIg5);
        listaNodos.push($$[$0]);        
        this.$ = resAsig5;
    
break;
case 57:

        let instConsole = new NodoGraphviz("node_"+nodoActual , '[label="console"];\n', [] );
        nodoActual++;        
        let ptConsole = new NodoGraphviz("node_"+nodoActual , '[label=":"];\n', [] );
        nodoActual++;                
        let logConsole = new NodoGraphviz("node_"+nodoActual , '[label="log"];\n', [] );
        nodoActual++;                
        let paraConsole = new NodoGraphviz("node_"+nodoActual , '[label="("];\n', [] );
        nodoActual++;                
        let parcConsole = new NodoGraphviz("node_"+nodoActual , '[label=")"];\n', [] );
        nodoActual++;        

        let resinstConsole = new NodoGraphviz("node_"+nodoActual , '[label="Console"];\n', [instConsole.id , ptConsole.id , logConsole.id, paraConsole.id, $$[$0-2].id, parcConsole.id] );
        nodoActual++;                

        listaNodos.push(instConsole);
        listaNodos.push(ptConsole);
        listaNodos.push(logConsole);
        listaNodos.push(paraConsole);
        listaNodos.push($$[$0-2]);
        listaNodos.push(parcConsole);
        this.$ = resinstConsole;
    
break;
case 58:

        let listaC = new NodoGraphviz("node_"+nodoActual , '[label="ListaConsole"];\n', [$$[$0-2].id] );
        nodoActual++;         
        let resListaC = new NodoGraphviz("node_"+nodoActual , '[label="ListaConsole"];\n', [listaC.id , $$[$0].id] );
        nodoActual++;        
        listaNodos.push($$[$0-2]);
        listaNodos.push(listaC);
        listaNodos.push($$[$0]);
        this.$ = resListaC;

    
break;
case 59:

    
break;
case 64:

        //Nodo If
        let instIf = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-5]+'"];\n', [] );
        nodoActual++;
        //Nodo (
        let paraIf = new NodoGraphviz("node_"+nodoActual , '[label="("];\n', [] );
        nodoActual++;
        let parcIf = new NodoGraphviz("node_"+nodoActual , '[label=")"];\n', [] );
        nodoActual++;
        //Llave abrir
        let llaveaIf = new NodoGraphviz("node_"+nodoActual , '[label="{"];\n', [] );
        nodoActual++;
        //Llave cerrar
        let llavecIf = new NodoGraphviz("node_"+nodoActual , '[label="}"];\n', [] );
        nodoActual++;        
        if($$[$0-1] != null){
            if($$[$0] != null){ //Bloque instrucciones y bloque else
                //Nodo BloqueInstrucciones
                let  blockinstIf = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [$$[$0-1].id] );
                nodoActual++;        
                let ptrsIf = [ instIf.id , paraIf.id , $$[$0-3].id, parcIf.id , llaveaIf.id, blockinstIf.id , llavecIf.id , $$[$0].id];
                let resIf = new NodoGraphviz("node_"+nodoActual , '[label="If"];\n', ptrsIf );  
                nodoActual++;
                listaNodos.push(instIf);
                listaNodos.push(paraIf);
                listaNodos.push($$[$0-3]);
                listaNodos.push(parcIf);
                listaNodos.push(llaveaIf);
                listaNodos.push(blockinstIf);
                listaNodos.push(llavecIf);
                listaNodos.push($$[$0]);
                this.$ = resIf;                
            }else{   //Bloque Instrucciones sin else
                let  blockinstIf = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [$$[$0-1].id] );
                nodoActual++;        
                let ptrsIf = [ instIf.id , paraIf.id , $$[$0-3].id, parcIf.id , llaveaIf.id, blockinstIf.id , llavecIf.id];
                let resIf = new NodoGraphviz("node_"+nodoActual , '[label="If"];\n', ptrsIf );  
                nodoActual++;
                listaNodos.push(instIf);
                listaNodos.push(paraIf);
                listaNodos.push($$[$0-3]);
                listaNodos.push(parcIf);
                listaNodos.push(llaveaIf);
                listaNodos.push(blockinstIf);
                listaNodos.push(llavecIf);
                this.$ = resIf;                 
            }
        }else{
            if($$[$0] != null){ //Bloque instrucciones vacio y existe else
                let  blockinstIf = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [] );
                nodoActual++;        
                let ptrsIf = [ instIf.id , paraIf.id , $$[$0-3].id, parcIf.id , llaveaIf.id, blockinstIf.id, llavecIf.id, $$[$0].id];
                let resIf = new NodoGraphviz("node_"+nodoActual , '[label="If"];\n', ptrsIf );  
                nodoActual++;
                listaNodos.push(instIf);
                listaNodos.push(paraIf);
                listaNodos.push($$[$0-3]);
                listaNodos.push(parcIf);
                listaNodos.push(llaveaIf);
                listaNodos.push(blockinstIf);
                listaNodos.push(llavecIf);
                listaNodos.push($$[$0]);
                this.$ = resIf;                     
            }else{ //Bloque instrucciones vacio sin else
                let  blockinstIf = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [] );
                nodoActual++;        
                let ptrsIf = [ instIf.id , paraIf.id , $$[$0-3].id, parcIf.id, llaveaIf.id, blockinstIf.id, llavecIf.id];                
                let resIf = new NodoGraphviz("node_"+nodoActual , '[label="If"];\n', ptrsIf );  
                nodoActual++;
                listaNodos.push(instIf);
                listaNodos.push(paraIf);
                listaNodos.push($$[$0-3]);
                listaNodos.push(parcIf);
                listaNodos.push(llaveaIf);
                listaNodos.push(blockinstIf);
                listaNodos.push(llavecIf);
                this.$ = resIf;               

            }
        }      
    
break;
case 65:

        let instElse = new NodoGraphviz("node_"+nodoActual , '[label="Else"];\n', [] );
        listaNodos.push(instElse);
        nodoActual++;
        listaNodos.push($$[$0]);
        let resElse = new NodoGraphviz("node_"+nodoActual , '[label="Else"];\n', [instElse.id , $$[$0].id] );
        nodoActual++;      
        this.$ = resElse;  

    
break;
case 66:

        let instElse2 = new NodoGraphviz("node_"+nodoActual , '[label="Else"];\n', [] );
        listaNodos.push(instElse2);
        nodoActual++;
        if($$[$0] != null){
        let  blockinstIf2 = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [$$[$0].id] );
        nodoActual++;             
        let resElse2 = new NodoGraphviz("node_"+nodoActual , '[label="Else"];\n', [instElse2.id, blockinstIf2.id] );
        listaNodos.push(blockinstIf2);
        nodoActual++;      
        this.$ = resElse2;
        }else{
        let  blockinstIf2 = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [] );
        nodoActual++;             
        let resElse2 = new NodoGraphviz("node_"+nodoActual , '[label="Else"];\n', [instElse2.id, blockinstIf2.id] );
        listaNodos.push(blockinstIf2);
        nodoActual++;      
        this.$ = resElse2;
        }
    
break;
case 67: case 85:

        this.$ = null;
    
break;
case 68:

        //Nodo If
        let instWhile = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-4]+'"];\n', [] );
        nodoActual++;
        //Nodo (
        let paraWh = new NodoGraphviz("node_"+nodoActual , '[label="("];\n', [] );
        nodoActual++;
        let parcWh = new NodoGraphviz("node_"+nodoActual , '[label=")"];\n', [] );
        nodoActual++;
        //Llave abrir
        let llaveaWh = new NodoGraphviz("node_"+nodoActual , '[label="{"];\n', [] );
        nodoActual++;
        //Llave Cerrar
        let llavecWh = new NodoGraphviz("node_"+nodoActual , '[label="}"];\n', [] );
        nodoActual++;
        if($$[$0] != null){
        //Nodo BloqueInstrucciones
        let  blockinstWh = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [$$[$0].id] );
        nodoActual++;    
        let ptrsWh = [instWhile.id , paraWh.id, $$[$0-2].id, parcWh.id, llaveaWh.id, blockinstWh.id, llavecWh.id];
        let  resWh = new NodoGraphviz("node_"+nodoActual , '[label="While"];\n', ptrsWh );
        nodoActual++;    
        listaNodos.push(instWhile);
        listaNodos.push(paraWh);
        listaNodos.push($$[$0-2]);
        listaNodos.push(parcWh);
        listaNodos.push(llaveaWh);
        listaNodos.push(blockinstWh);
        listaNodos.push(llavecWh);
        this.$ = resWh;                 
        }else{
        let  blockinstWh = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [] );
        nodoActual++;             
        let ptrsWh = [instWhile.id , paraWh.id, $$[$0-2].id, parcWh.id, llaveaWh.id, blockinstWh.id, llavecWh.id];
        let  resWh = new NodoGraphviz("node_"+nodoActual , '[label="While"];\n', ptrsWh );
        nodoActual++;    
        listaNodos.push(instWhile);
        listaNodos.push(paraWh);
        listaNodos.push($$[$0-2]);
        listaNodos.push(parcWh);
        listaNodos.push(llaveaWh);
        listaNodos.push(blockinstWh);
        listaNodos.push(llavecWh);        
        this.$ = resWh;        
        }
    
break;
case 69:

        //Nodo Do
        let instDo = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-6]+'"];\n', [] );
        nodoActual++;
        //Nodo While
        let instDoWh = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-4]+'"];\n', [] );
        nodoActual++;        
        //Nodo (
        let paraDo = new NodoGraphviz("node_"+nodoActual , '[label="("];\n', [] );
        nodoActual++;
        let parcDo = new NodoGraphviz("node_"+nodoActual , '[label=")"];\n', [] );
        nodoActual++;
        //Llave abrir
        let llaveaDo = new NodoGraphviz("node_"+nodoActual , '[label="{"];\n', [] );
        nodoActual++;
        //Llave Cerrar
        let llavecDo = new NodoGraphviz("node_"+nodoActual , '[label="}"];\n', [] );
        nodoActual++;
        if($$[$0-5] != null){
        //Nodo BloqueInstrucciones
        let  blockinstDo = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [$$[$0-5].id] );
        nodoActual++;    
        let ptrsDo = [instDo.id, llaveaDo.id, blockinstDo.id, llavecDo.id, instDoWh.id, paraDo.id, $$[$0-2].id, parcDo.id];
        let  resDo = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', ptrsDo );
        nodoActual++;    
        listaNodos.push(instDo);        
        listaNodos.push(llaveaDo);
        listaNodos.push(blockinstDo);
        listaNodos.push(llavecDo);
        listaNodos.push(instDoWh);
        listaNodos.push(paraDo);
        listaNodos.push($$[$0-2]);
        listaNodos.push(parcDo);
        this.$ = resDo;                 
        }else{
        //Nodo BloqueInstrucciones
        let  blockinstDo = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [] );
        nodoActual++;    
        let ptrsDo = [instDo.id, llaveaDo.id, blockinstDo.id, llavecDo.id, instDoWh.id, paraDo.id, $$[$0-2].id, parcDo.id];
        let  resDo = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', ptrsDo );
        nodoActual++;    
        listaNodos.push(instDo);        
        listaNodos.push(llaveaDo);
        listaNodos.push(blockinstDo);
        listaNodos.push(llavecDo);
        listaNodos.push(instDoWh);
        listaNodos.push(paraDo);
        listaNodos.push($$[$0-2]);
        listaNodos.push(parcDo);
        this.$ = resDo;                 
        }        
    
break;
case 70:

        let instSw = new NodoGraphviz("node_"+nodoActual , '[label="switch"];\n', []);
        nodoActual++;        
        //(
        let paraSw = new NodoGraphviz("node_"+nodoActual , '[label="("];\n', []);
        nodoActual++;                
        let parcSw = new NodoGraphviz("node_"+nodoActual , '[label=")"];\n', []);
        nodoActual++;   
        let llaveaSw = new NodoGraphviz("node_"+nodoActual , '[label="{"];\n', []);
        nodoActual++;                
        let llavecSw = new NodoGraphviz("node_"+nodoActual , '[label="}"];\n', []);
        nodoActual++;                        
//        let bloqueSw = new NodoGraphviz("node_"+nodoActual , '[label="BloqueCase"];\n', [$$[$0-2].id]);
//        nodoActual++;                        

        let ptrsSw = [instSw.id, paraSw.id, $$[$0-5].id, parcSw.id, llaveaSw.id, $$[$0-2].id, $$[$0-1].id, llavecSw.id];
        let resSw = new NodoGraphviz("node_"+nodoActual , '[label="Switch"];\n', ptrsSw);
        nodoActual++;                        
         
        listaNodos.push(instSw);
        listaNodos.push(paraSw);
        listaNodos.push($$[$0-5]);
        listaNodos.push(parcSw);
        listaNodos.push(llaveaSw);
        listaNodos.push($$[$0-2]);
        listaNodos.push($$[$0-1]);
        listaNodos.push(llavecSw);
        
        this.$ = resSw;      
    
break;
case 71:

        let bloqueC = new NodoGraphviz("node_"+nodoActual , '[label="BloqueCase"];\n', [$$[$0-1].id]);
        nodoActual++;
        let bloqueCa2 = new NodoGraphviz("node_"+nodoActual , '[label="Case"];\n', [$$[$0].id]);
        nodoActual++;
        let nodo_bloqueC2 = new NodoGraphviz("node_"+nodoActual , '[label="BloqueCase"];\n', [ bloqueC.id, bloqueCa2.id ]);
        nodoActual++;       
        listaNodos.push($$[$0-1]);        
        listaNodos.push(bloqueC);
        listaNodos.push(bloqueCa2);
        this.$ = nodo_bloqueC2;        
    
break;
case 72:

        let bloqueCa = new NodoGraphviz("node_"+nodoActual , '[label="BloqueCase"];\n', [$$[$0].id]);
        nodoActual++;        
        this.$ = bloqueCa;
    
break;
case 73:

        //Nodo Case
        let instCase = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-3]+'"];\n', [] );
        nodoActual++; 
        //Nodo :
        let instdsptCase = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;               
        //Nodo Bloque iNstr
        let bloqueInstCase = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [$$[$0].id] );
        nodoActual++;
        //Nodo Res
        let resCase = new NodoGraphviz("node_"+nodoActual , '[label="Case"];\n', [instCase.id, $$[$0-2].id, instdsptCase.id, bloqueInstCase.id] );
        nodoActual++;                
        listaNodos.push(instCase);
        listaNodos.push($$[$0-2]);
        listaNodos.push(instdsptCase);
        listaNodos.push(bloqueInstCase);
        listaNodos.push(resCase);
        this.$ = resCase;
    
break;
case 74:

        //Nodo Case
        let instDef = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-2]+'"];\n', [] );
        nodoActual++; 
        //Nodo :
        let instdsptDef = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;               
        //Nodo Bloque iNstr
        let bloqueInstDef = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [$$[$0].id] );
        nodoActual++;
        //Nodo Res
        let resDef = new NodoGraphviz("node_"+nodoActual , '[label="Case"];\n', [instDef.id, instdsptDef.id, bloqueInstDef.id] );
        nodoActual++;                
        listaNodos.push(instDef);
        listaNodos.push(instdsptDef);
        listaNodos.push(bloqueInstDef);
        this.$ = resDef;    
    
break;
case 75:

        let resDef2 = new NodoGraphviz("node_"+nodoActual , '[label="Case"];\n', [] );
        nodoActual++;
        this.$ = resDef2;        
    
break;
case 84:

        this.$ = $$[$0-1];
    
break;
case 86:

        //Nodo Function
        let instFunction = new NodoGraphviz("node_"+nodoActual , '[label="function"];\n', [] );
        nodoActual++;       
        //Nodo Function
        let instIdFn = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-8]+'"];\n', [] );
        nodoActual++;                 
        //Nodo Function
        let paraFn = new NodoGraphviz("node_"+nodoActual , '[label="("];\n', [] );
        nodoActual++;                         
        let parcFn = new NodoGraphviz("node_"+nodoActual , '[label=")"];\n', [] );
        nodoActual++;
        let dsptsFn = new NodoGraphviz("node_"+nodoActual , '[label=":"];\n', [] );
        nodoActual++;        
        let tipoFn = new NodoGraphviz("node_"+nodoActual , '[label="tipo"];\n', [$$[$0-3].id] );
        nodoActual++;

        let llaveaFn = new NodoGraphviz("node_"+nodoActual , '[label="{"];\n', [] );
        nodoActual++;                         
        let llavecFn = new NodoGraphviz("node_"+nodoActual , '[label="}"];\n', [] );
        nodoActual++;        

        let bloqueFn = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [$$[$0-1].id] );
        nodoActual++;        

        let resFn = new NodoGraphviz("node_"+nodoActual , '[label="Funcion"];\n', [instFunction.id, instIdFn.id, paraFn.id, $$[$0-6].id, parcFn.id, dsptsFn.id , tipoFn.id, llaveaFn.id, bloqueFn.id, llavecFn.id] );
        nodoActual++;     

        listaNodos.push(instFunction);
        listaNodos.push(instIdFn);
        listaNodos.push(paraFn);
        listaNodos.push($$[$0-6]);
        listaNodos.push(parcFn);
        listaNodos.push(dsptsFn);
        listaNodos.push(tipoFn);
        listaNodos.push(llaveaFn);
        listaNodos.push(bloqueFn);
        listaNodos.push(llavecFn);
        this.$ = resFn;   
    
break;
case 87:

        //Nodo Function
        let instFunction2 = new NodoGraphviz("node_"+nodoActual , '[label="function"];\n', [] );
        nodoActual++;       
        //Nodo Function
        let instIdFn2 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-6]+'"];\n', [] );
        nodoActual++;                 
        //Nodo Function
        let paraFn2 = new NodoGraphviz("node_"+nodoActual , '[label="("];\n', [] );
        nodoActual++;                         
        let parcFn2 = new NodoGraphviz("node_"+nodoActual , '[label=")"];\n', [] );
        nodoActual++;        

        let llaveaFn2 = new NodoGraphviz("node_"+nodoActual , '[label="{"];\n', [] );
        nodoActual++;                         
        let llavecFn2 = new NodoGraphviz("node_"+nodoActual , '[label="}"];\n', [] );
        nodoActual++;        

        let bloqueFn2 = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [$$[$0-1].id] );
        nodoActual++;        

        let resFn2 = new NodoGraphviz("node_"+nodoActual , '[label="Funcion"];\n', [instFunction2.id, instIdFn2.id, paraFn2.id, $$[$0-4].id, parcFn2.id, llaveaFn2.id, bloqueFn2.id, llavecFn2.id] );
        nodoActual++;     

        listaNodos.push(instFunction2);
        listaNodos.push(instIdFn2);
        listaNodos.push(paraFn2);
        listaNodos.push($$[$0-4]);
        listaNodos.push(parcFn2);
        listaNodos.push(llaveaFn2);
        listaNodos.push(bloqueFn2);
        listaNodos.push(llavecFn2);
        this.$ = resFn2;   

    
break;
case 88:

        //Nodo Function
        let instFunction3 = new NodoGraphviz("node_"+nodoActual , '[label="function"];\n', [] );
        nodoActual++;       
        //Nodo Function
        let instIdFn3 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-7]+'"];\n', [] );
        nodoActual++;                 
        //Nodo Function
        let paraFn3 = new NodoGraphviz("node_"+nodoActual , '[label="("];\n', [] );
        nodoActual++;                         
        let parcFn3 = new NodoGraphviz("node_"+nodoActual , '[label=")"];\n', [] );
        nodoActual++;
        let dsptsFn3 = new NodoGraphviz("node_"+nodoActual , '[label=":"];\n', [] );
        nodoActual++;        
        let tipoFn3 = new NodoGraphviz("node_"+nodoActual , '[label="tipo"];\n', [$$[$0-3].id] );
        nodoActual++;

        let llaveaFn3 = new NodoGraphviz("node_"+nodoActual , '[label="{"];\n', [] );
        nodoActual++;                         
        let llavecFn3 = new NodoGraphviz("node_"+nodoActual , '[label="}"];\n', [] );
        nodoActual++;        

        let bloqueFn3 = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [$$[$0-1].id] );
        nodoActual++;        

        let resFn3 = new NodoGraphviz("node_"+nodoActual , '[label="Funcion"];\n', [instFunction3.id, instIdFn3.id, paraFn3.id, parcFn3.id, dsptsFn3.id , tipoFn3.id, llaveaFn3.id, bloqueFn3.id, llavecFn3.id] );
        nodoActual++;     

        listaNodos.push(instFunction);
        listaNodos.push(instIdFn);
        listaNodos.push(paraFn);
        listaNodos.push(parcFn);
        listaNodos.push(dsptsFn);
        listaNodos.push(tipoFn);
        listaNodos.push(llaveaFn);
        listaNodos.push(bloqueFn);
        listaNodos.push(llavecFn);
        this.$ = resFn3;           
    
break;
case 89:

        let instFunction4 = new NodoGraphviz("node_"+nodoActual , '[label="function"];\n', [] );
        nodoActual++;       
        //Nodo Function
        let instIdFn4 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-5]+'"];\n', [] );
        nodoActual++;                 
        //Nodo Function
        let paraFn4 = new NodoGraphviz("node_"+nodoActual , '[label="("];\n', [] );
        nodoActual++;                         
        let parcFn4 = new NodoGraphviz("node_"+nodoActual , '[label=")"];\n', [] );
        nodoActual++;        

        let llaveaFn4 = new NodoGraphviz("node_"+nodoActual , '[label="{"];\n', [] );
        nodoActual++;                         
        let llavecFn4 = new NodoGraphviz("node_"+nodoActual , '[label="}"];\n', [] );
        nodoActual++;

        let bloqueFn4 = new NodoGraphviz("node_"+nodoActual , '[label="BloqueInstrucciones"];\n', [$$[$0-1].id] );
        nodoActual++;                

        let ptrsFn4 = [instFunction4.id , instIdFn4.id, paraFn4.id, parcFn4.id, llaveaFn4.id, bloqueFn4.id, llavecFn4.id];
        let resFn4 = new NodoGraphviz("node_"+nodoActual , '[label="Funcion"];\n', ptrsFn4 );
        nodoActual++;

        listaNodos.push(instFunction4);
        listaNodos.push(instIdFn4);
        listaNodos.push(paraFn4);
        listaNodos.push(parcFn4);
        listaNodos.push(llaveaFn4);
        listaNodos.push(bloqueFn4);
        listaNodos.push(llavecFn4);
        this.$ = resFn4;
    
break;
case 90:

//        let Params1 = new NodoGraphviz("node_"+nodoActual , '[label="parametros"];\n', [$$[$0-2].id] );
//        nodoActual++;
        let Params2 = new NodoGraphviz("node_"+nodoActual , '[label="parametro"];\n', [$$[$0].id]);
        nodoActual++;                
        let resParams = new NodoGraphviz("node_"+nodoActual , '[label="parametros"];\n', [$$[$0-2].id , Params2.id] );
        nodoActual++;        
        listaNodos.push($$[$0-2]);
//        listaNodos.push(Params1);
        listaNodos.push(Params2);
        this.$ = resParams;
    
break;
case 91:

        let paramParams = new NodoGraphviz("node_"+nodoActual , '[label="parametros"];\n', [$$[$0].id] );
        nodoActual++;
        this.$ = paramParams ;                                      
    
break;
case 92:

        let paramId = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-3]+'"];\n', [] );
        nodoActual++;                         
        let dsptsParam = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-2]+'"];\n', [] );
        nodoActual++;                                 
        let paramTipo = new NodoGraphviz("node_"+nodoActual , '[label="tipo"];\n', [$$[$0-1].id] );
        nodoActual++;                                 
        let paramCorch= new NodoGraphviz("node_"+nodoActual , '[label="ListaCorchetes"];\n', [$$[$0].id] );
        nodoActual++;                                 

        let resParam = new NodoGraphviz("node_"+nodoActual , '[label="parametro"];\n', [paramId.id , dsptsParam.id, paramTipo.id, paramCorch.id] );
        nodoActual++;                         

        listaNodos.push(paramId);
        listaNodos.push(dsptsParam);
        listaNodos.push(paramTipo);
        listaNodos.push(paramCorch);
        listaNodos.push(resParam);
        this.$ = resParam;
    
break;
case 93:

        let paramId2 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-2]+'"];\n', [] );
        nodoActual++;                         
        let dsptsParam2 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;                                 
        let paramTipo2 = new NodoGraphviz("node_"+nodoActual , '[label="tipo"];\n', [$$[$0].id] );
        nodoActual++;                                   

        let resParam2 = new NodoGraphviz("node_"+nodoActual , '[label="parametro"];\n', [paramId2.id , dsptsParam2.id, paramTipo2.id]);
        nodoActual++;                         

        listaNodos.push(paramId2);
        listaNodos.push(dsptsParam2);
        listaNodos.push(paramTipo2);
        listaNodos.push(resParam2);
        this.$ = resParam2;        
    
break;
case 94:

        let opNeg = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opNeg);
        listaNodos.push($$[$0]);
        let expNeg = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [opNeg.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expNeg;        
    
break;
case 95:

        listaNodos.push($$[$0-2]);
        let opPot = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opPot);
        listaNodos.push($$[$0]);
        let expPot = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-2].id , opPot.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expPot;                        
    
break;
case 96:

        listaNodos.push($$[$0-2]);
        let opSum = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opSum);
        listaNodos.push($$[$0]);
        let expSum = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-2].id , opSum.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expSum;        
    
break;
case 97:

        listaNodos.push($$[$0-2]);
        let opRes = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opRes);
        listaNodos.push($$[$0]);
        let expRes = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-2].id , opRes.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expRes;        
    
break;
case 98:

        listaNodos.push($$[$0-2]);
        let opMul = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opMul);
        listaNodos.push($$[$0]);
        let expMul = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-2].id , opMul.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expMul;        
    
break;
case 99:

        listaNodos.push($$[$0-2]);
        let opMod = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opMod);
        listaNodos.push($$[$0]);
        let expMod = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-2].id , opMod.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expMod;        
    
break;
case 100:

        listaNodos.push($$[$0-2]);
        let opDiv = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opDiv);
        listaNodos.push($$[$0]);
        let expDiv = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-2].id , opDiv.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expDiv;        
    
break;
case 101:

        listaNodos.push($$[$0-2]);
        let opMen = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opMen);
        listaNodos.push($$[$0]);
        let expMen = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-2].id , opMen.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expMen;        
    
break;
case 102:

        listaNodos.push($$[$0-2]);
        let opMenIg = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opMenIg);
        listaNodos.push($$[$0]);
        let expMenIg = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-2].id , opMenIg.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expMenIg;         
    
break;
case 103:

        listaNodos.push($$[$0-2]);
        let opMay = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opMay);
        listaNodos.push($$[$0]);
        let expMay = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-2].id , opMay.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expMay;         
    
break;
case 104:

        listaNodos.push($$[$0-2]);
        let opMayIg = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opMayIg);
        listaNodos.push($$[$0]);
        let expMayIg = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-2].id , opMayIg.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expMayIg;        
    
break;
case 105:

        listaNodos.push($$[$0-2]);
        let opIgIg = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opIgIg);
        listaNodos.push($$[$0]);
        let expIgIg = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-2].id , opIgIg.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expIgIg;        
    
break;
case 106:

        listaNodos.push($$[$0-2]);
        let opDif = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opDif);
        listaNodos.push($$[$0]);
        let expDif = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-2].id , opDif.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expDif;        
    
break;
case 107:

        listaNodos.push($$[$0-2]);
        let opAnd = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opAnd);
        listaNodos.push($$[$0]);
        let expAnd = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-2].id , opAnd.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expAnd;        
    
break;
case 108:

        listaNodos.push($$[$0-2]);
        let opOr = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opOr);
        listaNodos.push($$[$0]);
        let expOr = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [$$[$0-2].id , opOr.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expOr;        
    
break;
case 109:

        let opNot = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(opNot);
        listaNodos.push($$[$0]);
        let expNot = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [opNot.id , $$[$0].id]);
        nodoActual++;        
        this.$ = expNot;          
    
break;
case 110:
 
        let f= new NodoGraphviz("node_"+nodoActual , '[label="F"];\n', [$$[$0].id] );
        nodoActual++;
        listaNodos.push(f);
        let fExpr = new NodoGraphviz("node_"+nodoActual , '[label="Expr"];\n', [f.id] );
        nodoActual++;                
        this.$ = fExpr;
    
break;
case 111:

        let ptrparamsParExp = [];
        let fparIzq = new NodoGraphviz("node_"+nodoActual , '[label="("];\n', [] );
        ptrparamsParExp.push(fparIzq.id);
        listaNodos.push(fparIzq);
        nodoActual++;
        ptrparamsParExp.push($$[$0-1].id);
        listaNodos.push($$[$0-1]);
        let fparder = new NodoGraphviz("node_"+nodoActual , '[label=")"];\n', [] );        
        ptrparamsParExp.push(fparder.id);
        nodoActual++;
        listaNodos.push(fparder);        
        let fParenExp = new NodoGraphviz("node_"+nodoActual , '[label="Exp"];\n', ptrparamsParExp );
        listaNodos.push(fParenExp);
        nodoActual++;        
        this.$ = fParenExp;        
    
break;
case 112:

        let fDecimal = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0]+'"];\n', [] );
        listaNodos.push(fDecimal);
        nodoActual++;        
        this.$ = fDecimal;
    
break;
case 113:

        let fEntero = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0]+'"];\n', [] );
        listaNodos.push(fEntero);
        nodoActual++;        
        this.$ = fEntero;
    
break;
case 114:

        let fCadena = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0]+'"];\n', [] );
        listaNodos.push(fCadena);
        nodoActual++;        
        this.$ = fCadena;

    
break;
case 115:

        let fCadenaSim = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0]+'"];\n', [] );
        listaNodos.push(fCadenaSim);
        nodoActual++;        
        this.$ = fCadenaSim;
    
break;
case 116:

        let fTrue = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0]+'"];\n', [] );
        listaNodos.push(fTrue);
        nodoActual++;        
        this.$ = fTrue;        
    
break;
case 117:

        let fFalse = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0]+'"];\n', [] );
        listaNodos.push(fFalse);
        nodoActual++;        
        this.$ = fFalse;
    
break;
case 118:

        let fNull = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0]+'"];\n', [] );
        listaNodos.push(fNull);
        nodoActual++;        
        this.$ = fNull;
    
break;
case 121:

        let fidAcs = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        nodoActual++;
        listaNodos.push(fidAcs);
        let resfAcs = new NodoGraphviz("node_"+nodoActual , '[label="accesos"];\n', [fidAcs.id, $$[$0].id]);
        nodoActual++;
        listaNodos.push(resfAcs);
        listaNodos.push($$[$0]);
        this.$ = resfAcs;        

    
break;
case 122:

        let increExp = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        listaNodos.push(increExp);
        nodoActual++;
        let masmasExp = new NodoGraphviz("node_"+nodoActual , '[label="++"];\n', [] );
        listaNodos.push(masmasExp);
        nodoActual++;        
        let incrementoExp = new NodoGraphviz("node_"+nodoActual , '[label="Incremento"];\n', [increExp.id, masmasExp.id] );
        listaNodos.push(incrementoExp);
        nodoActual++;        
        this.$ = incrementoExp;        
    
break;
case 123:

        let decrExp = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-1]+'"];\n', [] );
        listaNodos.push(decrExp);
        nodoActual++;        
        let menmenExp = new NodoGraphviz("node_"+nodoActual , '[label="--"];\n', [] );
        listaNodos.push(menmenExp);
        nodoActual++;        
        let decrementoExp = new NodoGraphviz("node_"+nodoActual , '[label="Decremento"];\n', [decrExp.id , menmenExp.id] );
        listaNodos.push(decrementoExp);
        nodoActual++;        
        this.$ = decrementoExp;
    
break;
case 124:

        let ptrparamsExp = [];
        let fcorIzq = new NodoGraphviz("node_"+nodoActual , '[label="["];\n', [] );
        ptrparamsExp.push(fcorIzq.id);
        listaNodos.push(fcorIzq);
        nodoActual++;
        for(let i = 0; i < $$[$0-1].length; i++){
            ptrparamsExp.push($$[$0-1][i].id);
            listaNodos.push($$[$0-1][i]);
        }
        let fcorder = new NodoGraphviz("node_"+nodoActual , '[label="]"];\n', [] );        
        ptrparamsExp.push(fcorder.id);
        nodoActual++;
        listaNodos.push(fcorder);        
        let fParamExp = new NodoGraphviz("node_"+nodoActual , '[label="arreglo"];\n', ptrparamsExp );
        listaNodos.push(fParamExp);
        nodoActual++;        
        this.$ = fParamExp;
    
break;
case 125:
 
        let fID = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0]+'"];\n', [] );
        listaNodos.push(fID);
        nodoActual++;        
        this.$ = fID;
    
break;
case 126:

        let Acc = new NodoGraphviz("node_"+nodoActual , '[label="accesos"];\n', [$$[$0-1].id]);
        nodoActual++;                
        let Acc2 = new NodoGraphviz("node_"+nodoActual , '[label="acceso"];\n', [$$[$0].id]);
        nodoActual++;                        
        let resAccesos = new NodoGraphviz("node_"+nodoActual , '[label="accesos"];\n', [Acc.id , Acc2.id]);
        nodoActual++;                        
        listaNodos.push(Acc);
        listaNodos.push($$[$0-1]);
        listaNodos.push(Acc2);
        listaNodos.push($$[$0]);
        this.$ = resAccesos;
    
break;
case 128:

        let ptAc = new NodoGraphviz("node_"+nodoActual , '[label="."];\n', [] );
        nodoActual++;
        let idAc = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0]+'"];\n', [] );
        nodoActual++;
        let resAc2 = new NodoGraphviz("node_"+nodoActual , '[label="acceso"];\n', [ptAc.id , idAc.id] );
        nodoActual++;
        listaNodos.push(ptAc);
        listaNodos.push(idAc);
        this.$ = resAc2;        
    
break;
case 129:

        let corchAc = new NodoGraphviz("node_"+nodoActual , '[label="["];\n', [] );
        nodoActual++;
        let corchAc2 = new NodoGraphviz("node_"+nodoActual , '[label="]"];\n', [] );
        nodoActual++;
        let resAc = new NodoGraphviz("node_"+nodoActual , '[label="acceso"];\n', [corchAc.id , $$[$0-1].id , corchAc2.id] );
        nodoActual++;
        listaNodos.push(corchAc);
        listaNodos.push($$[$0-1]);
        listaNodos.push(corchAc2);
        this.$ = resAc;        
    
break;
case 130:

        let ptrsLLamada = [];        
        let idLlam = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-3]+'"];\n', [] );
        nodoActual++;
        ptrsLLamada.push(idLlam.id);
        listaNodos.push(idLlam);
        let paraLlam = new NodoGraphviz("node_"+nodoActual , '[label="("];\n', [] );
        nodoActual++;
        listaNodos.push(paraLlam);
        ptrsLLamada.push(paraLlam.id);
        for(let i = 0; i < $$[$0-1].length; i++){
            ptrsLLamada.push($$[$0-1][i].id);
            listaNodos.push($$[$0-1][i]);
        }
        let parcLlam = new NodoGraphviz("node_"+nodoActual , '[label=")"];\n', [] );        
        ptrsLLamada.push(parcLlam.id);
        listaNodos.push(parcLlam);
        nodoActual++;        
        let resLLam = new NodoGraphviz("node_"+nodoActual , '[label="LlamadaFuncion"];\n', ptrsLLamada );
        listaNodos.push(resLLam);
        nodoActual++;        
        this.$ = resLLam;        
    
break;
case 131:
        
        let idLlam2 = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-2]+'"];\n', [] );
        nodoActual++;        
        let paraLlam2 = new NodoGraphviz("node_"+nodoActual , '[label="("];\n', [] );
        nodoActual++;
        let parcLlam2 = new NodoGraphviz("node_"+nodoActual , '[label=")"];\n', [] );        
        nodoActual++;        
        let resLLam2 = new NodoGraphviz("node_"+nodoActual , '[label="LlamadaFuncion"];\n', [idLlam2.id , paraLlam2.id , parcLlam2.id] );
        nodoActual++; 

        listaNodos.push(idLlam2);
        listaNodos.push(paraLlam2);
        listaNodos.push(parcLlam2);
        listaNodos.push(resLLam2);       
        this.$ = resLLam2;                
    
break;
case 132:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 133:

        this.$ = [$$[$0]];
    
break;
case 134:

        let instType = new NodoGraphviz("node_"+nodoActual , '[label="type"];\n', []);
        nodoActual++;                
        let idType = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-4]+'"];\n', []);
        nodoActual++;                        
        let igType = new NodoGraphviz("node_"+nodoActual , '[label="="];\n', []);
        nodoActual++;                        
        let llaveaType = new NodoGraphviz("node_"+nodoActual , '[label="{"];\n', []);
        nodoActual++;                                
        let llavecType = new NodoGraphviz("node_"+nodoActual , '[label="}"];\n', []);
        nodoActual++;
        let aptrType = [instType.id , idType.id , igType.id, llaveaType.id, $$[$0-1].id, llavecType.id];
        let resType = new NodoGraphviz("node_"+nodoActual , '[label="Type"];\n', aptrType);
        nodoActual++;                                                        
        listaNodos.push(instType);
        listaNodos.push(idType);
        listaNodos.push(igType);
        listaNodos.push(llaveaType);
        listaNodos.push($$[$0-1]);
        listaNodos.push(llavecType);
        this.$ = resType;        
    
break;
case 135:

        let AccT = new NodoGraphviz("node_"+nodoActual , '[label="AtributosType"];\n', [$$[$0-2].id]);
        nodoActual++;                                      
        let resAtribType = new NodoGraphviz("node_"+nodoActual , '[label="AtributosType"];\n', [AccT.id , $$[$0].id]);
        nodoActual++;                        
        listaNodos.push(AccT);
        listaNodos.push($$[$0-2]);
//        listaNodos.push(AccT2);
        listaNodos.push($$[$0]);
        this.$ = resAtribType;        
    
break;
case 137:

        let idAtrType = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-2]+'"];\n', [] );
        nodoActual++;        
        let dsptsAtrType = new NodoGraphviz("node_"+nodoActual , '[label=":"];\n', [] );
        nodoActual++;        
        let tipoAtrType = new NodoGraphviz("node_"+nodoActual , '[label="tipo"];\n', [$$[$0].id] );
        nodoActual++;
        let resAtrType = new NodoGraphviz("node_"+nodoActual , '[label="Atr_Type"];\n', [idAtrType.id , dsptsAtrType.id , tipoAtrType.id] );
        nodoActual++;
        listaNodos.push(idAtrType);
        listaNodos.push(dsptsAtrType);
        listaNodos.push(tipoAtrType);
        this.$ = resAtrType;                
    
break;
case 138:

        let AccT2 = new NodoGraphviz("node_"+nodoActual , '[label="AtributosType"];\n', [$$[$0-2].id]);
        nodoActual++;                                      
        let resAtribType2 = new NodoGraphviz("node_"+nodoActual , '[label="AtributosType"];\n', [AccT2.id , $$[$0].id]);
        nodoActual++;                        
        listaNodos.push(AccT2);
        listaNodos.push($$[$0-2]);
//        listaNodos.push(AccT2);
        listaNodos.push($$[$0]);
        this.$ = resAtribType2;           
    
break;
case 140:

        let idAtribType = new NodoGraphviz("node_"+nodoActual , '[label="'+$$[$0-2]+'"];\n', [] );
        nodoActual++;        
        let dsptsAtribType = new NodoGraphviz("node_"+nodoActual , '[label=":"];\n', [] );
        nodoActual++;        
        let resAtribbType = new NodoGraphviz("node_"+nodoActual , '[label="Atr_Type"];\n', [idAtribType.id , dsptsAtribType.id , $$[$0].id] );
        nodoActual++;
        listaNodos.push(idAtribType);
        listaNodos.push(dsptsAtribType);
        listaNodos.push($$[$0]);
        this.$ = resAtribbType;        
    
break;
case 141:

        let simbTer = new NodoGraphviz("node_"+nodoActual , '[label="?"];\n', [] );
        nodoActual++;         
        let dosptsTer = new NodoGraphviz("node_"+nodoActual , '[label=":"];\n', [] );
        nodoActual++;                 
        let ptrsTernario = [$$[$0-4].id, simbTer.id, $$[$0-2].id, dosptsTer.id, $$[$0].id];
        let resTer = new NodoGraphviz("node_"+nodoActual , '[label="ternario"];\n', ptrsTernario );
        nodoActual++;                         
        listaNodos.push($$[$0-4]);
        listaNodos.push(simbTer);
        listaNodos.push($$[$0-2]);
        listaNodos.push(dosptsTer);
        listaNodos.push($$[$0]);
        this.$ = resTer;     
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},{1:[3]},{2:$V0,5:[1,34],6:35,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),{11:[1,36]},o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),{11:[1,37]},{11:[1,38]},o($Vg,[2,16]),o($Vg,[2,17]),{23:[1,39]},{11:[1,40]},{11:[1,41]},{11:[1,44],19:57,23:$Vh,28:42,29:43,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{23:$Vt,31:[1,60],32:[1,61],37:$Vu,43:$Vv,52:64,53:$Vw,55:[1,63],58:[1,62],105:68},o($Vg,[2,26]),{30:[1,70]},{30:[1,71]},{23:[1,72]},{23:[1,73]},{39:$Vx,63:74},{23:[1,76]},{23:[1,77]},{55:[1,78]},{30:[1,79]},{30:[1,80]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,7]),o($Vg,[2,14]),o($Vg,[2,15]),{24:[1,81]},o($Vg,[2,19]),o($Vg,[2,20]),{11:[1,82]},{11:[1,83],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,110:[1,84]},o($Vg,[2,23]),{19:57,23:$Vh,29:99,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:100,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($VM,[2,110]),{19:57,23:$Vh,29:101,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($VM,[2,112]),o($VM,[2,113]),o($VM,[2,114]),o($VM,[2,115]),o($VM,[2,116]),o($VM,[2,117]),o($VM,[2,118]),o($VM,[2,119]),o($VM,[2,120]),o($VM,$VN,{105:68,52:102,23:$Vt,31:$VO,32:$VP,43:$Vv,55:$VQ}),{19:57,23:$Vh,29:107,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:106},{11:[1,108]},{11:[1,109]},{55:[1,110]},{30:$VR,59:[1,111]},{37:$VS,43:$Vv,55:[1,115],105:114},{19:57,23:$Vh,29:116,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:118,30:$Vi,39:[1,117],43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,24:[1,120],29:107,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:119},o($VT,[2,127]),{19:57,23:$Vh,29:121,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{11:$VU,34:[1,122],37:$VV},{34:[1,125],37:$VW},{19:57,23:$Vh,29:127,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:128,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{66:[1,129]},{2:$V0,4:130,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,131],42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},{7:132,33:[1,134],42:[1,135],75:133},{19:57,23:$Vh,29:136,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{56:[1,137]},{23:[1,138]},{37:[1,139]},{11:[1,140]},o($Vg,[2,21]),o($Vg,[2,22]),{19:57,23:$Vh,29:141,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:142,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:143,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:144,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:145,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:146,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:147,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:148,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:149,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:150,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:151,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:152,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:153,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:154,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:155,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($VM,[2,94]),o($VM,[2,109]),{24:[1,156],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($VM,$VX,{105:114,43:$Vv,55:$VY}),o($VM,[2,122]),o($VM,[2,123]),{30:$VR,61:[1,158]},{44:[1,159],46:$VZ},o($V_,[2,133],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),o($Vg,[2,24]),o($Vg,[2,25]),{59:[1,161]},{23:[1,162]},o($VT,[2,128]),{19:57,23:$Vh,29:164,30:$Vi,38:163,43:$V$,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($VT,[2,126]),{30:$VR},o($V01,[2,54],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{30:$V11,40:166,109:167},o($V01,[2,56],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{24:[1,169],46:$VZ},o($VM,[2,131]),{44:[1,170],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{30:$V21,35:171,48:$V31,49:$V41,50:$V51,51:$V61},{19:57,23:$Vh,29:177,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($V71,[2,34]),{30:$V21,35:178,48:$V31,49:$V41,50:$V51,51:$V61},{19:57,23:$Vh,29:179,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{24:[1,180],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{24:[1,181],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{23:[1,182]},{2:$V0,6:35,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,183],42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($V81,[2,85]),{19:57,23:$Vh,29:184,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{76:[1,185],77:[1,186]},{30:[1,187]},{30:[1,188]},{24:[1,189],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{23:[1,190]},{24:[1,192],30:$V91,79:191,80:193},{39:[1,195]},o($Vg,[2,18]),{34:[1,196],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o([11,24,34,41,44,46,81,82,83,84,86,87,88,89,90,91,92,93,94,110],[2,95],{85:$VC}),o($Va1,[2,96],{82:$Vz,84:$VB,85:$VC,86:$VD}),o($Va1,[2,97],{82:$Vz,84:$VB,85:$VC,86:$VD}),o($Vb1,[2,98],{82:$Vz,85:$VC}),o($VM,[2,99]),o($Vb1,[2,100],{82:$Vz,85:$VC}),o($Vc1,[2,101],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($Vc1,[2,102],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($Vc1,[2,103],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($Vc1,[2,104],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($Vd1,[2,105],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH}),o($Vd1,[2,106],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH}),o([11,24,34,41,44,46,93,94,110],[2,107],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ}),o([11,24,34,41,44,46,94,110],[2,108],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK}),o($VM,[2,111]),{30:$VR,61:[1,197]},o($VM,[2,63]),o($VM,[2,124]),{19:57,23:$Vh,29:198,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{23:[1,199]},{19:57,23:$Vh,29:200,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($V01,[2,52]),o($V01,[2,53],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{19:57,23:$Vh,29:107,30:$Vi,43:$Ve1,44:[1,202],45:201,47:203,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:106},{41:[1,205],46:$Vf1},o($Vg1,[2,139]),{34:[1,207]},o($VM,[2,130]),o($VT,[2,129]),{11:$Vh1,36:208,37:$Vi1,43:$Vj1},o($Vk1,[2,47]),o($Vk1,[2,48]),o($Vk1,[2,49]),o($Vk1,[2,50]),o($Vk1,[2,51]),{11:[1,212],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{36:213,37:$Vl1,43:$Vj1},{11:[1,215],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{39:$Vx,63:216},{39:$Vx,63:217},{19:57,23:$Vh,29:218,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($V81,[2,84]),{11:[1,219],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{19:57,23:$Vh,29:220,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:221,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($Vm1,[2,81],{11:$VU,34:[1,222],37:$VV}),o($Vm1,[2,83],{34:[1,223],37:$VW}),{39:[1,224]},{19:57,23:$Vh,29:226,30:$Vi,43:$Vj,57:225,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{24:[1,227],46:[1,228]},{34:[1,229],39:[1,230]},o($Vn1,[2,91]),{34:[1,231]},{30:$Vo1,107:232,108:233},{19:57,23:$Vh,29:235,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($VM,[2,62]),o($V_,[2,132],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{19:57,23:$Vh,29:236,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{24:[1,237],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{44:[1,238],46:[1,239]},o($V01,[2,42]),o($Vp1,[2,44]),{19:57,23:$Vh,29:107,30:$Vi,43:$Ve1,44:$Vq1,47:240,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:106},o($V01,[2,55]),{30:$V11,109:242},{19:57,23:$Vh,29:243,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{11:[1,245],37:[1,244],43:$Vr1},{19:57,23:$Vh,29:248,30:$Vi,39:[1,247],43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($V71,[2,32]),{44:[1,249]},o($V71,[2,33]),{37:[1,250],43:$Vr1},{19:57,23:$Vh,29:251,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($V71,[2,38]),o($Vg,[2,67],{64:252,65:[1,253]}),o($Vg,[2,68]),{24:[1,254],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{10:255,19:57,23:$Vh,29:256,30:[1,257],43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{24:[1,258],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{24:[1,259],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{30:$V21,35:260,48:$V31,49:$V41,50:$V51,51:$V61},{30:$V21,35:261,48:$V31,49:$V41,50:$V51,51:$V61},{69:262,71:263,72:$Vs1},{24:[1,265],46:[1,266]},o($Vn1,[2,59],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{34:[1,267],39:[1,268]},{30:$V91,80:269},{30:$V21,35:270,48:$V31,49:$V41,50:$V51,51:$V61},{2:$V0,4:271,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},{30:$V21,35:272,48:$V31,49:$V41,50:$V51,51:$V61},{41:[1,273],46:[1,274]},o($Vg1,[2,136]),{34:[1,275]},{11:[2,141],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{24:[1,276],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($Vg,[2,61]),o($V01,[2,41]),{43:$Vt1,47:277},{44:[1,279]},o($Vp1,[2,46]),o($Vg1,[2,138]),o($Vg1,[2,140],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{19:57,23:$Vh,29:281,30:$Vi,38:280,43:$V$,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($V71,[2,30]),{44:[1,282]},{30:$V11,40:283,109:167},{11:[1,284],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($Vu1,[2,40]),{19:57,23:$Vh,29:286,30:$Vi,38:285,43:$V$,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{11:[1,287],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($Vg,[2,64]),{8:288,39:$Vx,62:$V9,63:289},{11:[1,290]},{24:[1,291]},{24:[1,292],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($Vv1,$VN,{105:68,52:293,23:$Vt,31:$VO,32:$VP,37:$Vu,43:$Vv,53:$Vw,55:$VQ}),{39:$Vx,63:294},{39:$Vx,63:295},o($Vm1,[2,80],{36:208,11:$Vh1,37:$Vi1,43:$Vj1}),o($Vm1,[2,82],{36:213,37:$Vl1,43:$Vj1}),{41:[2,75],70:296,71:297,72:$Vs1,73:[1,298]},o($Vw1,[2,72]),{19:57,23:$Vh,29:299,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{11:[1,300]},{19:57,23:$Vh,29:301,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{30:$V21,35:302,48:$V31,49:$V41,50:$V51,51:$V61},{2:$V0,4:303,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($Vn1,[2,90]),{39:[1,304]},{2:$V0,6:35,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,305],42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($Vn1,[2,93],{36:306,43:$Vj1}),{11:[2,134]},{30:$Vo1,108:307},{30:$V21,35:308,48:$V31,49:$V41,50:$V51,51:$V61},o($Vg,[2,60]),o($Vp1,[2,43]),{43:$Vt1,44:$Vq1,47:240},o($Vp1,[2,45]),{11:[1,309]},{11:[1,310],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($Vu1,[2,39]),{41:[1,311],46:$Vf1},o($V71,[2,31]),{11:[1,312]},{11:[1,313],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($V71,[2,37]),o($Vg,[2,65]),o($Vg,[2,66]),o($Vg,[2,69]),{39:$Vx,63:314},{39:$Vx,63:315},o($Vv1,$VX,{105:114,37:$VS,43:$Vv,55:$VY}),o($Vg,[2,78]),o($Vg,[2,79]),{41:[1,316]},o($Vw1,[2,71]),{34:[1,317]},{34:[1,318],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($Vg,[2,57]),o($Vn1,[2,58],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{39:[1,319]},{2:$V0,6:35,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,320],42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},{2:$V0,4:321,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($Vg,[2,89]),o($Vn1,[2,92],{43:$Vr1}),o($Vg1,[2,135]),o($Vg1,[2,137]),o($V71,[2,27]),o($V71,[2,28]),{11:[1,322]},o($V71,[2,35]),o($V71,[2,36]),o($Vg,[2,76]),o($Vg,[2,77]),o($Vg,[2,70]),{2:$V0,4:323,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},{2:$V0,4:324,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},{2:$V0,4:325,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($Vg,[2,87]),{2:$V0,6:35,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,326],42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($V71,[2,29]),{2:$V0,6:35,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[2,74],42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($Vw1,[2,73],{7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,6:35,2:$V0,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf}),{2:$V0,6:35,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,327],42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($Vg,[2,88]),o($Vg,[2,86])],
defaultActions: {34:[2,1],273:[2,134]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { NodoGraphviz } = require("./NodoGraphviz");


    //Control para creacion de variables temporales
	let nodoActual = 0;
    let listaNodos = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 97
break;
case 4:return 98
break;
case 5:return 99
break;
case 6:return 100
break;
case 7:return 82
break;
case 8:return 84
break;
case 9:return 86
break;
case 10:return 53
break;
case 11:return 31
break;
case 12:return 32
break;
case 13:return 81
break;
case 14:return 83
break;
case 15:return '^'
break;
case 16:return 85
break;
case 17:return 88
break;
case 18:return 90
break;
case 19:return 87
break;
case 20:return 89
break;
case 21:return 91
break;
case 22:return 92
break;
case 23:return 37
break;
case 24:return 94
break;
case 25:return 93
break;
case 26:return 95
break;
case 27:return 23
break;
case 28:return 24 
break;
case 29:return 39
break;
case 30:return 41
break;
case 31:return 11
break;
case 32:return 34
break;
case 33:return 43
break;
case 34:return 44
break;
case 35:return 46
break;
case 36:return 55
break;
case 37:return '`'
break;
case 38:return '$'
break;
case 39:return 110
break;
case 40:return '"'
break;
case 41:return '\''
break;
case 42:return 62
break;
case 43:return 65
break;
case 44:return 68
break;
case 45:return 72
break;
case 46:return 73
break;
case 47:return 66
break;
case 48:return 67
break;
case 49:return 74
break;
case 50:return 76
break;
case 51:return 77
break;
case 52:return 101
break;
case 53:return 102
break;
case 54:return 27
break;
case 55:return 25
break;
case 56:return 26
break;
case 57:return 78
break;
case 58:return 33
break;
case 59:return 42
break;
case 60:return 54
break;
case 61:return 56
break;
case 62:return 22
break;
case 63:return 59
break;
case 64:return 'POP'
break;
case 65:return 61
break;
case 66:return 51
break;
case 67:return 48
break;
case 68:return 49
break;
case 69:return 50
break;
case 70:return 106
break;
case 71:return 103
break;
case 72:return 30;
break;
case 73:return 5
break;
case 74: 
    let error_lexico = new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico', yy_.yytext);
    errores.push(error_lexico);
    
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:(([0-9]+)\.([0-9]+)))/,/^(?:([0-9]+))/,/^(?:(("[^"]*")))/,/^(?:(('[^']*')))/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?:`)/,/^(?:\$)/,/^(?:\?)/,/^(?:")/,/^(?:\\')/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:function\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:void\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}