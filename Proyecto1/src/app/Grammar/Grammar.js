/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,18],$V2=[1,19],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,24],$V7=[1,25],$V8=[1,31],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,30],$Vd=[1,29],$Ve=[1,32],$Vf=[1,33],$Vg=[2,5,22,25,26,27,30,33,41,42,54,62,66,67,68,72,73,74,78,106],$Vh=[1,48],$Vi=[1,58],$Vj=[1,59],$Vk=[1,45],$Vl=[1,46],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[1,67],$Vu=[1,66],$Vv=[1,69],$Vw=[1,65],$Vx=[1,75],$Vy=[1,87],$Vz=[1,85],$VA=[1,86],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[11,24,34,41,44,46,81,82,83,84,85,86,87,88,89,90,91,92,93,94,110],$VN=[2,125],$VO=[1,103],$VP=[1,104],$VQ=[1,105],$VR=[1,112],$VS=[1,113],$VT=[11,24,34,37,41,43,44,46,55,81,82,83,84,85,86,87,88,89,90,91,92,93,94,110],$VU=[1,124],$VV=[1,123],$VW=[1,126],$VX=[2,121],$VY=[1,156],$VZ=[1,159],$V_=[24,44,46],$V$=[1,164],$V01=[11,24],$V11=[1,167],$V21=[1,175],$V31=[1,171],$V41=[1,172],$V51=[1,173],$V61=[1,174],$V71=[2,5,22,23,25,26,27,30,33,41,42,43,54,62,66,67,68,72,73,74,78,81,95,97,98,99,100,101,102,103,106],$V81=[2,5,22,25,26,27,30,33,41,42,54,62,65,66,67,68,72,73,74,78,106],$V91=[1,193],$Va1=[11,24,34,41,44,46,81,83,87,88,89,90,91,92,93,94,110],$Vb1=[11,24,34,41,44,46,81,83,84,86,87,88,89,90,91,92,93,94,110],$Vc1=[11,24,34,41,44,46,87,88,89,90,91,92,93,94,110],$Vd1=[11,24,34,41,44,46,91,92,93,94,110],$Ve1=[1,203],$Vf1=[1,205],$Vg1=[41,46],$Vh1=[1,209],$Vi1=[1,208],$Vj1=[1,210],$Vk1=[11,24,37,39,41,43,46,76,77],$Vl1=[1,213],$Vm1=[76,77],$Vn1=[24,46],$Vo1=[1,233],$Vp1=[44,46],$Vq1=[1,240],$Vr1=[1,245],$Vs1=[1,263],$Vt1=[1,277],$Vu1=[11,24,37,43,46],$Vv1=[24,81,82,83,84,85,86,87,88,89,90,91,92,93,94],$Vw1=[41,72,73];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"If":8,"Pushear":9,"asignacion":10,";":11,"While":12,"DoWhile":13,"For":14,"Switch":15,"Console":16,"funcion":17,"Type":18,"llamadaFuncion":19,"ForIn":20,"ForOf":21,"GRAFICAR":22,"(":23,")":24,"BREAK":25,"CONTINUE":26,"RETURN":27,"ternario":28,"Expr":29,"ID":30,"++":31,"--":32,"LET":33,":":34,"tipo":35,"corchetes":36,"=":37,"corchetesVacios":38,"{":39,"atributosType":40,"}":41,"CONST":42,"[":43,"]":44,"masCorchetes":45,",":46,"corcheteFinal":47,"NUMBER":48,"STRING":49,"BOOLEAN":50,"VOID":51,"accesos":52,"+=":53,"CONSOLE":54,".":55,"LOG":56,"ListaConsole":57,"accesosCorchetes":58,"PUSH":59,"Length":60,"LENGTH":61,"IF":62,"BloqueInstrucciones":63,"Else":64,"ELSE":65,"WHILE":66,"DO":67,"SWITCH":68,"BloqueCase":69,"Default":70,"Case":71,"CASE":72,"DEFAULT":73,"FOR":74,"declaracion_for":75,"IN":76,"OF":77,"FUNCTION":78,"parametros":79,"parametro":80,"-":81,"**":82,"+":83,"*":84,"%":85,"/":86,"<":87,"<=":88,">":89,">=":90,"==":91,"!=":92,"&&":93,"||":94,"!":95,"F":96,"DECIMAL":97,"ENTERO":98,"CADENA":99,"CADENASIM":100,"TRUE":101,"FALSE":102,"NULL":103,"paramsExp":104,"acceso":105,"TYPE":106,"decla_atr_type":107,"atr_type":108,"atribType":109,"?":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:";",22:"GRAFICAR",23:"(",24:")",25:"BREAK",26:"CONTINUE",27:"RETURN",30:"ID",31:"++",32:"--",33:"LET",34:":",37:"=",39:"{",41:"}",42:"CONST",43:"[",44:"]",46:",",48:"NUMBER",49:"STRING",50:"BOOLEAN",51:"VOID",53:"+=",54:"CONSOLE",55:".",56:"LOG",58:"accesosCorchetes",59:"PUSH",61:"LENGTH",62:"IF",65:"ELSE",66:"WHILE",67:"DO",68:"SWITCH",72:"CASE",73:"DEFAULT",74:"FOR",76:"IN",77:"OF",78:"FUNCTION",81:"-",82:"**",83:"+",84:"*",85:"%",86:"/",87:"<",88:"<=",89:">",90:">=",91:"==",92:"!=",93:"&&",94:"||",95:"!",97:"DECIMAL",98:"ENTERO",99:"CADENA",100:"CADENASIM",101:"TRUE",102:"FALSE",103:"NULL",106:"TYPE",110:"?"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,3],[6,2],[6,2],[6,3],[6,3],[6,2],[6,3],[6,3],[6,1],[7,8],[7,8],[7,9],[7,6],[7,7],[7,5],[7,5],[7,3],[7,8],[7,8],[7,7],[7,5],[36,3],[36,2],[38,3],[38,2],[45,3],[45,1],[47,3],[47,2],[35,1],[35,1],[35,1],[35,1],[35,1],[10,4],[10,4],[10,3],[10,5],[10,3],[16,7],[57,3],[57,1],[9,7],[9,6],[60,4],[60,3],[8,6],[64,2],[64,2],[64,0],[12,5],[13,7],[15,8],[69,2],[69,1],[71,4],[70,3],[70,0],[14,8],[14,8],[20,7],[21,7],[75,4],[75,2],[75,4],[75,2],[63,3],[63,2],[17,10],[17,8],[17,9],[17,7],[79,3],[79,1],[80,4],[80,3],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[96,3],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,2],[96,2],[96,2],[96,3],[96,1],[52,2],[52,1],[105,2],[105,3],[19,4],[19,3],[104,3],[104,1],[18,6],[107,3],[107,1],[108,3],[40,3],[40,1],[109,3],[28,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 71:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 44: case 59: case 72: case 91: case 133: case 136: case 139:

        this.$ = [$$[$0]];
    
break;
case 18:

        this.$ = new Graficar(_$[$0-2].first_line , _$[$0-2].first_column);
    
break;
case 19:

        this.$ = new Break(_$[$0-1].first_line , _$[$0-1].first_column);
    
break;
case 20:

        this.$ = new Continue(_$[$0-1].first_line , _$[$0-1].first_column);
    
break;
case 21: case 22:

        this.$ = new Return($$[$0-1] , _$[$0-2].first_line , _$[$0-2].first_column);
    
break;
case 23:

        this.$ = new Return(null , _$[$0-1].first_line , _$[$0-1].first_column);
    
break;
case 24: case 25:

        this.$ = new Incremento( $$[$0-2] , $$[$0-1] , _$[$0-2].first_line , _$[$0-2].first_column);
    
break;
case 26:
 
        var error_sin = new Error_(this._$.first_line, this._$.first_column, 'Sintactico', yytext);
        errores.push(error_sin);
    
break;
case 27:
 
        this.$ = new DeclaracionArreglo( $$[$0-6] , $$[$0-1] , true, Tipo.ARRAY , $$[$0-3], $$[$0-4], _$[$0-7].first_line , _$[$0-7].first_column);
    
break;
case 28:
 
        /* let arr : number[][] = [[5]];*/        
        this.$ = new DeclaracionArreglo( $$[$0-6] , $$[$0-1] , true, Tipo.ARRAY , $$[$0-3], $$[$0-4], _$[$0-7].first_line , _$[$0-7].first_column);
    
break;
case 29:
 
        /* let arr : aidi = { value : piola };*/
       // let tipo = new AccesoTipoType($$[$0-8] , _$[$0-8].first_line , _$[$0-8].first_column);        
        this.$ = new Type( $$[$0-7] , $$[$0-2] , $$[$0-5],  _$[$0-8].first_line , _$[$0-8].first_column);
    
break;
case 30:
 
        /* let arr : number[][]; */
        this.$ = new DeclaracionArreglo( $$[$0-4] , null , true, Tipo.ARRAY , $$[$0-1], $$[$0-2], _$[$0-5].first_line , _$[$0-5].first_column);
    
break;
case 31:
 
        /* let arr : number = 5;*/        
        this.$ = new Declaration( $$[$0-5] , $$[$0-1] , true, $$[$0-3],  _$[$0-6].first_line , _$[$0-6].first_column);
    
break;
case 32:
 
        /* let arr : number;*/        
        this.$ = new Declaration( $$[$0-3] , null , true, $$[$0-1],  _$[$0-4].first_line , _$[$0-4].first_column);
    
break;
case 33:

         /* let arr = 5;*/
        this.$ = new Declaration( $$[$0-3] , $$[$0-1] , true, Tipo.NULL, _$[$0-4].first_line , _$[$0-4].first_column);
    
break;
case 34:

        /* let arr; */
        this.$ = new Declaration( $$[$0-1] , null , true, Tipo.NULL, _$[$0-2].first_line , _$[$0-2].first_column);
    
break;
case 35: case 36:
 
        /* const arr : number[][] = [[5]];*/
        this.$ = new DeclaracionArreglo( $$[$0-6] , $$[$0-1] , false, Tipo.ARRAY , $$[$0-3], $$[$0-4], _$[$0-7].first_line , _$[$0-7].first_column);
    
break;
case 37:
 
        /* const arr : number = 5;*/
        this.$ = new Declaration( $$[$0-5] , $$[$0-1] , false, $$[$0-3], _$[$0-6].first_line , _$[$0-6].first_column);
    
break;
case 38:
 
         /* const arr  = 5;*/
        this.$ = new Declaration( $$[$0-3] , $$[$0-1] , false, Tipo.NULL, _$[$0-4].first_line , _$[$0-4].first_column);
    
break;
case 39:

        var cantidad = eval('$$[$0-2]');
        this.$ = parseInt( cantidad++);
    
break;
case 40:

        this.$ = 1;
    
break;
case 41:

         this.$ = new Arreglo2($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 42:

         this.$ = new Arreglo2(null, _$[$0-1].first_line, _$[$0-1].first_column); 
    
break;
case 43:
        
        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 45:

/*        if($$[$0-1] == null){
         this.$ = new Arreglo2(null, _$[$0-2].first_line, _$[$0-2].first_column);
        }else{
        let arrf = [$$[$0-1]]; 
         this.$ = new Arreglo2(arrf, _$[$0-2].first_line, _$[$0-2].first_column);             
        }*/
        let arrf = [$$[$0-1]]; 
         this.$ = new Arreglo2(arrf, _$[$0-2].first_line, _$[$0-2].first_column);             
    
break;
case 46:

         this.$ = new Arreglo2(null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 47:

        this.$ = Tipo.NUMBER;
    
break;
case 48:

        this.$ = Tipo.STRING;
    
break;
case 49:

        this.$ = Tipo.BOOLEAN;
    
break;
case 50:

        this.$ = Tipo.VOID;
    
break;
case 51:

        this.$ = new AccesoTipoType($$[$0] , _$[$0].first_line , _$[$0].first_column);
    
break;
case 52:

        //TODO verificar cuando un acceso sea null
        let lastIndx  = eval('$$[$0-2]');
        lastIndx.id = $$[$0-3];  
        lastIndx.tipoAcc = "asig";        
        this.$ = new AsignacionArray( lastIndx , $$[$0] , _$[$0-3].first_line , _$[$0-3].first_column);
    
break;
case 53:

        //TODO verificar cuando un acceso sea null
        let lastIndx2  = eval('$$[$0-2]');
        lastIndx2.id = $$[$0-3];  
        lastIndx2.tipoAcc = "asig";          
        this.$ = new AsignacionArray( lastIndx2 , $$[$0] , _$[$0-3].first_line , _$[$0-3].first_column);
    
break;
case 54:

        this.$ = new Concatenacion( $$[$0-2] , $$[$0] , _$[$0-2].first_line , _$[$0-2].first_column);
    
break;
case 55:

        this.$ = new AsignacionType( $$[$0-4] , $$[$0-1] , _$[$0-4].first_line , _$[$0-4].first_column);
    
break;
case 56:

        this.$ = new Asignacion( $$[$0-2] , $$[$0] , _$[$0-2].first_line , _$[$0-2].first_column);
    
break;
case 57:
   this.$ = new Console($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 58: case 90: case 135: case 138:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 60:

        let lastI2  = eval('$$[$0-5]');
        lastI2.id = $$[$0-6];
        this.$ = new Push($$[$0-6] , $$[$0-5] , $$[$0-1] , _$[$0-6].first_line , _$[$0-6].first_column);
    
break;
case 61:

        this.$ = new Push($$[$0-5] , null , $$[$0-1] , _$[$0-5].first_line , _$[$0-5].first_column);
    
break;
case 62:

        let lastI3  = eval('$$[$0-2]');
        lastI3.id = $$[$0-3];
        lastI3.tipoAcc = "exp";        
        this.$ = new Length($$[$0-3] , $$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 63:

        this.$ = new Length($$[$0-2] , null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 64:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 65: case 66: case 74: case 110:

        this.$ = $$[$0];
    
break;
case 67: case 75: case 85:

        this.$ = null;
    
break;
case 68:

        this.$ = new While( $$[$0-2] , $$[$0], _$[$0-4].first_line, _$[$0-4].first_column );
    
break;
case 69:

        this.$ = new DoWhile( $$[$0-2] , $$[$0-5], _$[$0-6].first_line , _$[$0-6].first_column);
    
break;
case 70:

        this.$ = new Switch( $$[$0-5] , $$[$0-2] , $$[$0-1], _$[$0-7].first_line , _$[$0-7].first_column);
    
break;
case 73:

        this.$ = new Case( $$[$0-2] , $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 76: case 77:
 
        this.$ = new For( $$[$0-5], $$[$0-4] , $$[$0-2], $$[$0] , _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 78:

        this.$ = new ForIn( $$[$0-4] , $$[$0-2], $$[$0], _$[$0-6].first_line , _$[$0-6].first_column);
    
break;
case 79:

        this.$ = new ForOf( $$[$0-4] , $$[$0-2], $$[$0], _$[$0-6].first_line , _$[$0-6].first_column);
    
break;
case 80: case 82:
 
        /* let arr : number;*/        
        this.$ = new Declaration( $$[$0-2] , null , true, $$[$0],  _$[$0-3].first_line , _$[$0-3].first_column);
    
break;
case 81: case 83:
 
        /* let arr : number;*/        
        this.$ = new Declaration( $$[$0] , null , true, Tipo.NULL ,  _$[$0-1].first_line , _$[$0-1].first_column);
    
break;
case 84:

        this.$ = new BloqueInstrucciones($$[$0-1], _$[$0-2].first_line , _$[$0-2].first_column);
    
break;
case 86:

        this.$ = new Funcion($$[$0-8] , $$[$0-1],  $$[$0-6], $$[$0-3], _$[$0-9].first_line , _$[$0-9].first_column);
    
break;
case 87:

        this.$ = new Funcion($$[$0-6] , $$[$0-1],  $$[$0-4], Tipo.NULL, _$[$0-7].first_line , _$[$0-7].first_column);
    
break;
case 88:

        this.$ = new Funcion($$[$0-7] , $$[$0-1], null, $$[$0-3] , _$[$0-8].first_line , _$[$0-8].first_column);
    
break;
case 89:

        this.$ = new Funcion($$[$0-5] , $$[$0-1],  null, Tipo.NULL, _$[$0-6].first_line , _$[$0-6].first_column);
    
break;
case 92:

        this.$ = new Parametro($$[$0-3] , Tipo.ARRAY , _$[$0-3].first_line , _$[$0-3].first_column);
    
break;
case 93:

        this.$ = new Parametro($$[$0-2] , $$[$0] , _$[$0-2].first_line , _$[$0-2].first_column);
    
break;
case 94:

        var cero = new Literal(0, _$[$0-1].first_line, _$[$0-1].first_column, Tipo.NUMBER); 
        this.$ = new ExpresionAritmetica(cero, $$[$0], OperacionesAritmeticas.RESTA, _$[$0-1].first_line,_$[$0-1].first_column);        
    
break;
case 95:
 
        this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], OperacionesAritmeticas.POTENCIA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 96:

        this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], OperacionesAritmeticas.SUMA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 97:

        this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], OperacionesAritmeticas.RESTA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 98:
 
        this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], OperacionesAritmeticas.MULTIPLICACION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 99:
 
        this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], OperacionesAritmeticas.MODULO, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 100:

        this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], OperacionesAritmeticas.DIVISION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 101:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.MENOR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 102:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.MENORIG, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 103:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.MAYOR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 104:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.MAYORIG, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 105:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.IGIG, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 106:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.DIF, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 107:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 108:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperacionLogica.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 109:

        this.$ = new ExpresionUnaria($$[$0],  OperacionUnaria.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 111:
 
        this.$ = $$[$0-1];
    
break;
case 112: case 113:
 
         this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.NUMBER);
    
break;
case 114:

         this.$ = new Literal($$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, Tipo.STRING);
    
break;
case 115:

         this.$ = new Literal($$[$0].replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column, Tipo.STRING);
    
break;
case 116: case 117:
 
         this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.BOOLEAN);
    
break;
case 118:

         this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.NULL);
    
break;
case 121:

        // this.$ = new AccesoArray($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
        let lastIndex  = eval('$$[$0]');
        lastIndex.id = $$[$0-1];
        lastIndex.tipoAcc = "exp";
        this.$ = lastIndex;               
    
break;
case 122:

        var v1 = new Access($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        var v2 =  new Literal(1, _$[$0-1].first_line, _$[$0-1].first_column, Tipo.NUMBER);
        this.$ = new ExpresionAritmetica(v1, v2, OperacionesAritmeticas.SUMA, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 123:

        var v1 = new Access($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        var v2 =  new Literal(1, _$[$0-1].first_line, _$[$0-1].first_column, Tipo.NUMBER);
        this.$ = new ExpresionAritmetica(v1, v2, OperacionesAritmeticas.RESTA, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 124:
 
         this.$ = new Arreglo2($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);

    
break;
case 125:

         this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 126:

        let acc = eval('$$[$0]');
        let ant = eval('$$[$0-1]');
        ant.final = false;
        acc.anterior = ant;
        this.$ = acc;
    
break;
case 128:

//        this.$ = [$$[$0]];
          this.$ = new AccesoType("" , null , $$[$0] , false,"asig", _$[$0-1].first_line , _$[$0-1].first_column );
    
break;
case 129:

//        this.$ = [$$[$0-1]];
          this.$ = new AccesoIndice("" , null , $$[$0-1] , true, "asig", _$[$0-2].first_line , _$[$0-2].first_column);
    
break;
case 130:

        this.$ = new LlamadaFuncion($$[$0-3] , $$[$0-1], _$[$0-3].first_line , _$[$0-3].first_column);
    
break;
case 131:

        this.$ = new LlamadaFuncion($$[$0-2] , null, _$[$0-2].first_line , _$[$0-2].first_column);
    
break;
case 132:

        if($$[$0] != "null"){
        $$[$0-2].push($$[$0]);
        }
        this.$ = $$[$0-2];
    
break;
case 134:

        this.$ = new DeclaracionType($$[$0-4], $$[$0-1] , _$[$0-5].first_line , _$[$0-5].first_column);
    
break;
case 137:

        this.$ = new AtrType(  $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 140:

        this.$ = new AtributoType($$[$0-2], $$[$0] , _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 141:

        this.$ = new Ternario($$[$0-4] , $$[$0-2], $$[$0], _$[$0-4].first_line , _$[$0-4].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},{1:[3]},{2:$V0,5:[1,34],6:35,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),{11:[1,36]},o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),{11:[1,37]},{11:[1,38]},o($Vg,[2,16]),o($Vg,[2,17]),{23:[1,39]},{11:[1,40]},{11:[1,41]},{11:[1,44],19:57,23:$Vh,28:42,29:43,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{23:$Vt,31:[1,60],32:[1,61],37:$Vu,43:$Vv,52:64,53:$Vw,55:[1,63],58:[1,62],105:68},o($Vg,[2,26]),{30:[1,70]},{30:[1,71]},{23:[1,72]},{23:[1,73]},{39:$Vx,63:74},{23:[1,76]},{23:[1,77]},{55:[1,78]},{30:[1,79]},{30:[1,80]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,7]),o($Vg,[2,14]),o($Vg,[2,15]),{24:[1,81]},o($Vg,[2,19]),o($Vg,[2,20]),{11:[1,82]},{11:[1,83],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,110:[1,84]},o($Vg,[2,23]),{19:57,23:$Vh,29:99,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:100,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($VM,[2,110]),{19:57,23:$Vh,29:101,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($VM,[2,112]),o($VM,[2,113]),o($VM,[2,114]),o($VM,[2,115]),o($VM,[2,116]),o($VM,[2,117]),o($VM,[2,118]),o($VM,[2,119]),o($VM,[2,120]),o($VM,$VN,{105:68,52:102,23:$Vt,31:$VO,32:$VP,43:$Vv,55:$VQ}),{19:57,23:$Vh,29:107,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:106},{11:[1,108]},{11:[1,109]},{55:[1,110]},{30:$VR,59:[1,111]},{37:$VS,43:$Vv,55:[1,115],105:114},{19:57,23:$Vh,29:116,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:118,30:$Vi,39:[1,117],43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,24:[1,120],29:107,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:119},o($VT,[2,127]),{19:57,23:$Vh,29:121,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{11:$VU,34:[1,122],37:$VV},{34:[1,125],37:$VW},{19:57,23:$Vh,29:127,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:128,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{66:[1,129]},{2:$V0,4:130,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,131],42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},{7:132,33:[1,134],42:[1,135],75:133},{19:57,23:$Vh,29:136,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{56:[1,137]},{23:[1,138]},{37:[1,139]},o($Vg,[2,18]),o($Vg,[2,21]),o($Vg,[2,22]),{19:57,23:$Vh,29:140,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:141,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:142,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:143,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:144,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:145,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:146,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:147,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:148,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:149,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:150,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:151,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:152,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:153,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:154,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($VM,[2,94]),o($VM,[2,109]),{24:[1,155],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($VM,$VX,{105:114,43:$Vv,55:$VY}),o($VM,[2,122]),o($VM,[2,123]),{30:$VR,61:[1,157]},{44:[1,158],46:$VZ},o($V_,[2,133],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),o($Vg,[2,24]),o($Vg,[2,25]),{59:[1,160]},{23:[1,161]},o($VT,[2,128]),{19:57,23:$Vh,29:163,30:$Vi,38:162,43:$V$,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($VT,[2,126]),{30:$VR},o($V01,[2,54],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{30:$V11,40:165,109:166},o($V01,[2,56],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{24:[1,168],46:$VZ},o($VM,[2,131]),{44:[1,169],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{30:$V21,35:170,48:$V31,49:$V41,50:$V51,51:$V61},{19:57,23:$Vh,29:176,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($V71,[2,34]),{30:$V21,35:177,48:$V31,49:$V41,50:$V51,51:$V61},{19:57,23:$Vh,29:178,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{24:[1,179],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{24:[1,180],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{23:[1,181]},{2:$V0,6:35,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,182],42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($V81,[2,85]),{19:57,23:$Vh,29:183,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{76:[1,184],77:[1,185]},{30:[1,186]},{30:[1,187]},{24:[1,188],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{23:[1,189]},{24:[1,191],30:$V91,79:190,80:192},{39:[1,194]},{34:[1,195],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o([11,24,34,41,44,46,81,82,83,84,86,87,88,89,90,91,92,93,94,110],[2,95],{85:$VC}),o($Va1,[2,96],{82:$Vz,84:$VB,85:$VC,86:$VD}),o($Va1,[2,97],{82:$Vz,84:$VB,85:$VC,86:$VD}),o($Vb1,[2,98],{82:$Vz,85:$VC}),o($VM,[2,99]),o($Vb1,[2,100],{82:$Vz,85:$VC}),o($Vc1,[2,101],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($Vc1,[2,102],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($Vc1,[2,103],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($Vc1,[2,104],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($Vd1,[2,105],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH}),o($Vd1,[2,106],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH}),o([11,24,34,41,44,46,93,94,110],[2,107],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ}),o([11,24,34,41,44,46,94,110],[2,108],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK}),o($VM,[2,111]),{30:$VR,61:[1,196]},o($VM,[2,63]),o($VM,[2,124]),{19:57,23:$Vh,29:197,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{23:[1,198]},{19:57,23:$Vh,29:199,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($V01,[2,52]),o($V01,[2,53],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{19:57,23:$Vh,29:107,30:$Vi,43:$Ve1,44:[1,201],45:200,47:202,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:106},{41:[1,204],46:$Vf1},o($Vg1,[2,139]),{34:[1,206]},o($VM,[2,130]),o($VT,[2,129]),{11:$Vh1,36:207,37:$Vi1,43:$Vj1},o($Vk1,[2,47]),o($Vk1,[2,48]),o($Vk1,[2,49]),o($Vk1,[2,50]),o($Vk1,[2,51]),{11:[1,211],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{36:212,37:$Vl1,43:$Vj1},{11:[1,214],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{39:$Vx,63:215},{39:$Vx,63:216},{19:57,23:$Vh,29:217,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($V81,[2,84]),{11:[1,218],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{19:57,23:$Vh,29:219,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{19:57,23:$Vh,29:220,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($Vm1,[2,81],{11:$VU,34:[1,221],37:$VV}),o($Vm1,[2,83],{34:[1,222],37:$VW}),{39:[1,223]},{19:57,23:$Vh,29:225,30:$Vi,43:$Vj,57:224,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{24:[1,226],46:[1,227]},{34:[1,228],39:[1,229]},o($Vn1,[2,91]),{34:[1,230]},{30:$Vo1,107:231,108:232},{19:57,23:$Vh,29:234,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($VM,[2,62]),o($V_,[2,132],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{19:57,23:$Vh,29:235,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{24:[1,236],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{44:[1,237],46:[1,238]},o($V01,[2,42]),o($Vp1,[2,44]),{19:57,23:$Vh,29:107,30:$Vi,43:$Ve1,44:$Vq1,47:239,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:106},o($V01,[2,55]),{30:$V11,109:241},{19:57,23:$Vh,29:242,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{11:[1,244],37:[1,243],43:$Vr1},{19:57,23:$Vh,29:247,30:$Vi,39:[1,246],43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($V71,[2,32]),{44:[1,248]},o($V71,[2,33]),{37:[1,249],43:$Vr1},{19:57,23:$Vh,29:250,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($V71,[2,38]),o($Vg,[2,67],{64:251,65:[1,252]}),o($Vg,[2,68]),{24:[1,253],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{10:254,19:57,23:$Vh,29:255,30:[1,256],43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{24:[1,257],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{24:[1,258],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{30:$V21,35:259,48:$V31,49:$V41,50:$V51,51:$V61},{30:$V21,35:260,48:$V31,49:$V41,50:$V51,51:$V61},{69:261,71:262,72:$Vs1},{24:[1,264],46:[1,265]},o($Vn1,[2,59],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{34:[1,266],39:[1,267]},{30:$V91,80:268},{30:$V21,35:269,48:$V31,49:$V41,50:$V51,51:$V61},{2:$V0,4:270,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},{30:$V21,35:271,48:$V31,49:$V41,50:$V51,51:$V61},{41:[1,272],46:[1,273]},o($Vg1,[2,136]),{34:[1,274]},{11:[2,141],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},{24:[1,275],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($Vg,[2,61]),o($V01,[2,41]),{43:$Vt1,47:276},{44:[1,278]},o($Vp1,[2,46]),o($Vg1,[2,138]),o($Vg1,[2,140],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{19:57,23:$Vh,29:280,30:$Vi,38:279,43:$V$,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($V71,[2,30]),{44:[1,281]},{30:$V11,40:282,109:166},{11:[1,283],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($Vu1,[2,40]),{19:57,23:$Vh,29:285,30:$Vi,38:284,43:$V$,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{11:[1,286],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($Vg,[2,64]),{8:287,39:$Vx,62:$V9,63:288},{11:[1,289]},{24:[1,290]},{24:[1,291],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($Vv1,$VN,{105:68,52:292,23:$Vt,31:$VO,32:$VP,37:$Vu,43:$Vv,53:$Vw,55:$VQ}),{39:$Vx,63:293},{39:$Vx,63:294},o($Vm1,[2,80],{36:207,11:$Vh1,37:$Vi1,43:$Vj1}),o($Vm1,[2,82],{36:212,37:$Vl1,43:$Vj1}),{41:[2,75],70:295,71:296,72:$Vs1,73:[1,297]},o($Vw1,[2,72]),{19:57,23:$Vh,29:298,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{11:[1,299]},{19:57,23:$Vh,29:300,30:$Vi,43:$Vj,60:56,81:$Vk,95:$Vl,96:47,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{30:$V21,35:301,48:$V31,49:$V41,50:$V51,51:$V61},{2:$V0,4:302,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($Vn1,[2,90]),{39:[1,303]},{2:$V0,6:35,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,304],42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($Vn1,[2,93],{36:305,43:$Vj1}),{11:[2,134]},{30:$Vo1,108:306},{30:$V21,35:307,48:$V31,49:$V41,50:$V51,51:$V61},o($Vg,[2,60]),o($Vp1,[2,43]),{43:$Vt1,44:$Vq1,47:239},o($Vp1,[2,45]),{11:[1,308]},{11:[1,309],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($Vu1,[2,39]),{41:[1,310],46:$Vf1},o($V71,[2,31]),{11:[1,311]},{11:[1,312],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($V71,[2,37]),o($Vg,[2,65]),o($Vg,[2,66]),o($Vg,[2,69]),{39:$Vx,63:313},{39:$Vx,63:314},o($Vv1,$VX,{105:114,37:$VS,43:$Vv,55:$VY}),o($Vg,[2,78]),o($Vg,[2,79]),{41:[1,315]},o($Vw1,[2,71]),{34:[1,316]},{34:[1,317],81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL},o($Vg,[2,57]),o($Vn1,[2,58],{81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL}),{39:[1,318]},{2:$V0,6:35,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,319],42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},{2:$V0,4:320,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($Vg,[2,89]),o($Vn1,[2,92],{43:$Vr1}),o($Vg1,[2,135]),o($Vg1,[2,137]),o($V71,[2,27]),o($V71,[2,28]),{11:[1,321]},o($V71,[2,35]),o($V71,[2,36]),o($Vg,[2,76]),o($Vg,[2,77]),o($Vg,[2,70]),{2:$V0,4:322,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},{2:$V0,4:323,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},{2:$V0,4:324,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($Vg,[2,87]),{2:$V0,6:35,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,325],42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($V71,[2,29]),{2:$V0,6:35,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[2,74],42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($Vw1,[2,73],{7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,6:35,2:$V0,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf}),{2:$V0,6:35,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,326],42:$V7,54:$V8,62:$V9,66:$Va,67:$Vb,68:$Vc,74:$Vd,78:$Ve,106:$Vf},o($Vg,[2,88]),o($Vg,[2,86])],
defaultActions: {34:[2,1],272:[2,134]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Tipo } = require('../Abstract/Retorno');
    const { Simbolo } = require('../Symbol/Simbolo');

    const {ExpresionAritmetica, OperacionesAritmeticas} = require('../Expression/ExpresionAritmetica');
    const { Access } = require('../Expression/Access');
    const { AccesoArray } = require('../Expression/AccesoArray');
    
    
    const { AccesoIndice } = require('../Expression/AccesoIndice');        
    
    
    const { Literal } = require('../Expression/Literal');
    const { Arreglo } = require('../Expression/Arreglo');
    const { AccesoType } = require('../Expression/AccesoType');
    const { AtributoType } = require('../Expression/AtributoType');
    const { Ternario } = require('../Expression/Ternario');
    
    const { Arreglo2 } = require('../Instruction/Arreglo2');    
    const { Type } = require('../Instruction/Types');    
    const { DeclaracionType } = require('../Instruction/DeclaracionType');    
        
    
    const { Declaration } = require('../Instruction/Declaracion');
    const { DeclaracionArreglo } = require('../Instruction/DeclaracionArreglo');    
    const { If } = require('../Instruction/If');     
    const { While } = require('../Instruction/While');
    const { DoWhile } = require('../Instruction/DoWhile');
    const { For } = require('../Instruction/For');
    const { ForIn } = require('../Instruction/ForIn');
    const { ForOf } = require('../Instruction/ForOf');    
    const { Asignacion } = require('../Instruction/Asignacion');  

    const { Concatenacion } = require('../Instruction/Concatenacion');  
    const { Incremento } = require('../Instruction/Incremento');      

    const { AsignacionArray } = require('../Instruction/AsignacionArray');
    const { AsignacionType } = require('../Instruction/AsignacionType');    
    const { Console } = require('../Instruction/Console');
    const { Switch } = require('../Instruction/Switch');
    const { LlamadaFuncion } = require('../Instruction/LLamadaFuncion');
    const { BloqueInstrucciones } = require('../Instruction/BloqueInstrucciones');    
    const { Case } = require('../Instruction/Case');    
    const { ExpresionLogica , OperacionLogica } = require('../Expression/ExpresionLogica');
    const { ExpresionUnaria , OperacionUnaria } = require('../Expression/OperacionUnaria');
    const { Funcion } = require('../Instruction/Funcion');
    const { Break } = require('../Instruction/Break');
    const { Continue } = require('../Instruction/Continue');
    const { Return } = require('../Instruction/Return');
    const { Graficar } = require('../Instruction/Graficar');    
    const { Push } = require('../Instruction/Push');
    const { Length } = require('../Instruction/Length');        
    const { Parametro } = require('../Instruction/Parametro');
    const { Error_ } = require("../Error/Error");
    const { errores } = require('../Error/Errores');

    /*MANEJO DE TYPES-------------------------------------------------------*/
    const { AtrType } = require('../Instruction/AtrType');    
    const { AccesoTipoType } = require('../Expression/AccesoTipoType');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 97
break;
case 4:return 98
break;
case 5:return 99
break;
case 6:return 100
break;
case 7:return 82
break;
case 8:return 84
break;
case 9:return 86
break;
case 10:return 53
break;
case 11:return 31
break;
case 12:return 32
break;
case 13:return 81
break;
case 14:return 83
break;
case 15:return '^'
break;
case 16:return 85
break;
case 17:return 88
break;
case 18:return 90
break;
case 19:return 87
break;
case 20:return 89
break;
case 21:return 91
break;
case 22:return 92
break;
case 23:return 37
break;
case 24:return 94
break;
case 25:return 93
break;
case 26:return 95
break;
case 27:return 23
break;
case 28:return 24 
break;
case 29:return 39
break;
case 30:return 41
break;
case 31:return 11
break;
case 32:return 34
break;
case 33:return 43
break;
case 34:return 44
break;
case 35:return 46
break;
case 36:return 55
break;
case 37:return '`'
break;
case 38:return '$'
break;
case 39:return 110
break;
case 40:return '"'
break;
case 41:return '\''
break;
case 42:return 62
break;
case 43:return 65
break;
case 44:return 68
break;
case 45:return 72
break;
case 46:return 73
break;
case 47:return 66
break;
case 48:return 67
break;
case 49:return 74
break;
case 50:return 76
break;
case 51:return 77
break;
case 52:return 101
break;
case 53:return 102
break;
case 54:return 27
break;
case 55:return 25
break;
case 56:return 26
break;
case 57:return 78
break;
case 58:return 33
break;
case 59:return 42
break;
case 60:return 54
break;
case 61:return 56
break;
case 62:return 22
break;
case 63:return 59
break;
case 64:return 'POP'
break;
case 65:return 61
break;
case 66:return 51
break;
case 67:return 48
break;
case 68:return 49
break;
case 69:return 50
break;
case 70:return 106
break;
case 71:return 103
break;
case 72:return 30;
break;
case 73:return 5
break;
case 74: 
    let error_lexico = new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico', yy_.yytext);
    errores.push(error_lexico);
    
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:(([0-9]+)\.([0-9]+)))/,/^(?:([0-9]+))/,/^(?:(("[^"]*")))/,/^(?:(('[^']*')))/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?:`)/,/^(?:\$)/,/^(?:\?)/,/^(?:")/,/^(?:\\')/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:function\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:void\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}