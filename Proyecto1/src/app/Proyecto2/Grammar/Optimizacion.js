/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Optimizacion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[1,34],$Vi=[1,40],$Vj=[1,41],$Vk=[1,42],$Vl=[1,43],$Vm=[1,44],$Vn=[1,37],$Vo=[1,39],$Vp=[1,35],$Vq=[1,36],$Vr=[1,38],$Vs=[5,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,44,49,54,55,70,74,75],$Vt=[39,47],$Vu=[19,38],$Vv=[1,69],$Vw=[1,67],$Vx=[1,68],$Vy=[39,68,69],$Vz=[2,70],$VA=[1,72],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[1,96],$VM=[19,47,57,58,59,60,61,62,63,64,65,66,67,73];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"instruccion":6,"Encabezado":7,"Declaracion":8,"Funcion":9,"Asignacion":10,"AccesoArreglo":11,"SeteoArreglo":12,"SaltoCondicional":13,"Llamada":14,"Label":15,"Print":16,"Goto":17,"RETURN":18,";":19,"STDIO":20,"MATH":21,"DECLA_HEAP":22,"DECLA_ENT":23,"DECLA_DEC":24,"DECLA_P":25,"DECLA_H":26,"NATIVA_ESP":27,"NATIVA_ESP2":28,"NATIVA_ESP3":29,"NATIVA_ESP4":30,"NATIVA_ESP5":31,"NATIVA_ESP6":32,"NATIVA_ESP7":33,"NATIVA_ESP8":34,"NATIVA_ESP9":35,"Tipo":36,"ListaId":37,",":38,"ID":39,"INT":40,"DOUBLE":41,"CHAR":42,"VOID":43,"FLOAT":44,"DefFunc":45,"(":46,")":47,"{":48,"}":49,"BloqueInstrucciones":50,"=":51,"F":52,"Op":53,"IF":54,"GOTO":55,":":56,"+":57,"-":58,"*":59,"/":60,"%":61,"==":62,"!=":63,"<=":64,"<":65,">=":66,">":67,"ENTERO":68,"DECIMAL":69,"HEAP":70,"[":71,"Casteo":72,"]":73,"STACK":74,"PRINT":75,"TipoPrint":76,"PRINT_C":77,"PRINT_D":78,"PRINT_E":79,"PRINT_F":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"RETURN",19:";",20:"STDIO",21:"MATH",22:"DECLA_HEAP",23:"DECLA_ENT",24:"DECLA_DEC",25:"DECLA_P",26:"DECLA_H",27:"NATIVA_ESP",28:"NATIVA_ESP2",29:"NATIVA_ESP3",30:"NATIVA_ESP4",31:"NATIVA_ESP5",32:"NATIVA_ESP6",33:"NATIVA_ESP7",34:"NATIVA_ESP8",35:"NATIVA_ESP9",38:",",39:"ID",40:"INT",41:"DOUBLE",42:"CHAR",43:"VOID",44:"FLOAT",46:"(",47:")",48:"{",49:"}",51:"=",54:"IF",55:"GOTO",56:":",57:"+",58:"-",59:"*",60:"/",61:"%",62:"==",63:"!=",64:"<=",65:"<",66:">=",67:">",68:"ENTERO",69:"DECIMAL",70:"HEAP",71:"[",73:"]",74:"STACK",75:"PRINT",77:"PRINT_C",78:"PRINT_D",79:"PRINT_E",80:"PRINT_F"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[37,3],[37,1],[36,1],[36,1],[36,1],[36,1],[36,1],[45,4],[9,2],[9,4],[50,3],[50,2],[10,6],[10,4],[13,9],[17,3],[15,2],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[52,1],[52,1],[52,1],[11,8],[11,8],[12,8],[12,8],[72,3],[72,0],[16,8],[76,1],[76,1],[76,1],[76,1],[14,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 35:

        this.$ = [$$[$0]];
    
break;
case 4:

        this.$ = new Encabezado($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 15:

        this.$ = new Encabezado("return;",_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 33:

        this.$ = new DeclaracionOpt($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 34:

        $$[$0-2].push($$[$0]);
    
break;
case 41:

        this.$ = $$[$0-2];
    
break;
case 42:

        this.$ = new Encabezado("void " + $$[$0-1] + "();", _$[$0-1].first_line, _$[$0-1].first_column);        
    
break;
case 43:

        this.$ = new FuncionOpt($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 44:

        this.$ = $$[$0-1];
    
break;
case 45:

        this.$ = [];
    
break;
case 46:

        this.$ = new AsigOpt($$[$0-5], $$[$0-3], $$[$0-2], $$[$0-1], true, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 47:

        this.$ = new AsigOpt($$[$0-3], $$[$0-1], "", "", false, _$[$0-3].first_line, _$[$0-3].first_column);        
    
break;
case 48:

        this.$ = new SaltoCon(""+$$[$0-6],$$[$0-5],""+$$[$0-4],$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
    
break;
case 49:

        this.$ = new SaltoInc($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 50:

        this.$ = new Label($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 65:

        this.$ = new GetHeap($$[$0-5],$$[$0-3],$$[$0-7],$$[$0-2],_$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 66:

        this.$ = new GetHeap($$[$0-5],$$[$0-3],$$[$0-7],$$[$0-2],_$[$0-7].first_line, _$[$0-7].first_column);        
    
break;
case 67:

        this.$ = new SetHeap($$[$0-7],$$[$0-5],$$[$0-1],$$[$0-4],_$[$0-7].first_line, _$[$0-7].first_column);          
    
break;
case 68:

        this.$ = new SetHeap($$[$0-7],$$[$0-5],$$[$0-1],$$[$0-4],_$[$0-7].first_line, _$[$0-7].first_column);                  
    
break;
case 69:

        this.$ = "(" + $$[$0-1] + ")"; 
    
break;
case 70:
 this.$ = "" 
break;
case 71:

        this.$ = new Print($$[$0-5], $$[$0-3], $$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 76:

        this.$ = new Encabezado($$[$0-3]+"();", _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:32,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:33,54:$Vn,55:$Vo,70:$Vp,74:$Vq,75:$Vr},{1:[3]},{5:[1,45],6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:32,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:33,54:$Vn,55:$Vo,70:$Vp,74:$Vq,75:$Vr},o($Vs,[2,3]),o($Vs,[2,4]),o($Vs,[2,5]),o($Vs,[2,6]),o($Vs,[2,7]),o($Vs,[2,8]),o($Vs,[2,9]),o($Vs,[2,10]),o($Vs,[2,11]),o($Vs,[2,12]),o($Vs,[2,13]),o($Vs,[2,14]),{19:[1,47]},o($Vs,[2,16]),o($Vs,[2,17]),o($Vs,[2,18]),o($Vs,[2,20]),o($Vs,[2,21]),o($Vs,[2,22]),o($Vs,[2,23]),o($Vs,[2,24]),o($Vs,[2,25]),o($Vs,[2,26]),o($Vs,[2,27]),o($Vs,[2,28]),o($Vs,[2,29]),o($Vs,[2,30]),o($Vs,[2,31]),o($Vs,[2,32]),{37:48,39:[1,49]},{19:[1,50],48:[1,51]},{46:[1,53],51:[1,52],56:[1,54]},{71:[1,55]},{71:[1,56]},{46:[1,57]},{46:[1,58]},{39:[1,59]},o($Vt,[2,36]),o($Vt,[2,37]),o($Vt,[2,38]),{39:[1,60]},o($Vt,[2,40]),{1:[2,1]},o($Vs,[2,2]),o($Vs,[2,15]),{19:[1,61],38:[1,62]},o($Vu,[2,35]),o($Vs,[2,42]),{4:63,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:32,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:33,54:$Vn,55:$Vo,70:$Vp,74:$Vq,75:$Vr},{39:$Vv,52:64,68:$Vw,69:$Vx,70:[1,65],74:[1,66]},{47:[1,70]},o($Vs,[2,50]),o($Vy,$Vz,{72:71,46:$VA}),o($Vy,$Vz,{72:73,46:$VA}),{39:$Vv,52:74,68:$Vw,69:$Vx},{76:75,77:[1,76],78:[1,77],79:[1,78],80:[1,79]},{19:[1,80]},{46:[1,81]},o($Vs,[2,33]),{39:[1,82]},{6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:32,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:33,49:[1,83],54:$Vn,55:$Vo,70:$Vp,74:$Vq,75:$Vr},{19:[1,85],53:84,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL},{71:[1,97]},{71:[1,98]},o($VM,[2,62]),o($VM,[2,63]),o($VM,[2,64]),{19:[1,99]},{39:$Vv,52:100,68:$Vw,69:$Vx},{36:101,40:$Vi,41:$Vj,42:$Vk,43:[1,102],44:$Vm},{39:$Vv,52:103,68:$Vw,69:$Vx},{53:104,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL},{38:[1,105]},{38:[2,72]},{38:[2,73]},{38:[2,74]},{38:[2,75]},o($Vs,[2,49]),{47:[1,106]},o($Vu,[2,34]),o($Vs,[2,43]),{39:$Vv,52:107,68:$Vw,69:$Vx},o($Vs,[2,47]),o($Vy,[2,51]),o($Vy,[2,52]),o($Vy,[2,53]),o($Vy,[2,54]),o($Vy,[2,55]),o($Vy,[2,56]),o($Vy,[2,57]),o($Vy,[2,58]),o($Vy,[2,59]),o($Vy,[2,60]),o($Vy,[2,61]),o($Vy,$Vz,{72:108,46:$VA}),o($Vy,$Vz,{72:109,46:$VA}),o($Vs,[2,76]),{73:[1,110]},{47:[1,111]},{47:[2,39]},{73:[1,112]},{39:$Vv,52:113,68:$Vw,69:$Vx},o($Vy,$Vz,{72:114,46:$VA}),o([19,48],[2,41]),{19:[1,115]},{39:$Vv,52:116,68:$Vw,69:$Vx},{39:$Vv,52:117,68:$Vw,69:$Vx},{51:[1,118]},o($Vy,[2,69]),{51:[1,119]},{47:[1,120]},{39:$Vv,52:121,68:$Vw,69:$Vx},o($Vs,[2,46]),{73:[1,122]},{73:[1,123]},{39:$Vv,52:124,68:$Vw,69:$Vx},{39:$Vv,52:125,68:$Vw,69:$Vx},{55:[1,126]},{47:[1,127]},{19:[1,128]},{19:[1,129]},{19:[1,130]},{19:[1,131]},{39:[1,132]},{19:[1,133]},o($Vs,[2,65]),o($Vs,[2,66]),o($Vs,[2,67]),o($Vs,[2,68]),{19:[1,134]},o($Vs,[2,71]),o($Vs,[2,48])],
defaultActions: {45:[2,1],76:[2,72],77:[2,73],78:[2,74],79:[2,75],102:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const { AsigOpt } = require("../Optimizacion/AsigOpt");
    const { DeclaracionOpt } = require("../Optimizacion/DeclaracionOpt");    
    const { Encabezado } = require("../Optimizacion/Encabezado");    
    const { FuncionOpt } = require("../Optimizacion/FuncionOpt");
    const { Label } = require("../Optimizacion/Label");    
    const { SaltoCon } = require("../Optimizacion/SaltoCon");
    const { SaltoInc } = require("../Optimizacion/SaltoInc");
    const { GetHeap } = require("../Optimizacion/GetHeap");    
    const { SetHeap } = require("../Optimizacion/SetHeap");
    const { Print } = require("../Optimizacion/Print");        
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 69
break;
case 4:return 68
break;
case 5:return 20
break;
case 6:return 21
break;
case 7:return 22
break;
case 8:return 22
break;
case 9:return 23
break;
case 10:return 24
break;
case 11:return 25
break;
case 12:return 26
break;
case 13:return 59
break;
case 14:return 60
break;
case 15:return 58
break;
case 16:return 57
break;
case 17:return 61
break;
case 18:return 64
break;
case 19:return 66
break;
case 20:return 65
break;
case 21:return 67
break;
case 22:return 62
break;
case 23:return 63
break;
case 24:return 51
break;
case 25:return 48
break;
case 26:return 49
break;
case 27:return 71
break;
case 28:return 73
break;
case 29:return 56
break;
case 30:return 46
break;
case 31:return 47
break;
case 32:return 19
break;
case 33:return 56
break;
case 34:return 38
break;
case 35:return '.'
break;
case 36:return 55
break;
case 37:return 54
break;
case 38:return 43
break;
case 39:return 41
break;
case 40:return 40
break;
case 41:return 42
break;
case 42:return 44
break;
case 43:return 18
break;
case 44:return 74
break;
case 45:return 70
break;
case 46:return 75
break;
case 47:return 79
break;
case 48:return 77
break;
case 49:return 80
break;
case 50:return 78
break;
case 51:return 27
break;
case 52:return 28
break;
case 53:return 29
break;
case 54:return 30
break;
case 55:return 31
break;
case 56:return 32
break;
case 57:return 33
break;
case 58:return 34
break;
case 59:return 35
break;
case 60:return 39;
break;
case 61:return 5
break;
case 62: console.log("error");
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:(-?(-?[0-9]+)\.(-?[0-9]+)))/,/^(?:(-?[0-9]+))/,/^(?:#include <stdio\.h>)/,/^(?:#include <math\.h>)/,/^(?:double Heap\[64000\];)/,/^(?:double Stack\[64000\];)/,/^(?:int enteros\[15\];)/,/^(?:int decimales\[5\];)/,/^(?:int p;)/,/^(?:int h;)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\.)/,/^(?:goto\b)/,/^(?:if\b)/,/^(?:void\b)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:char\b)/,/^(?:float\b)/,/^(?:return\b)/,/^(?:Stack\b)/,/^(?:Heap\b)/,/^(?:printf\b)/,/^(?:"%e")/,/^(?:"%c")/,/^(?:"%f")/,/^(?:"%d")/,/^(?:copia2 = \(int\)copia;)/,/^(?:asciiNumero = fmod\(numero , 10\);)/,/^(?:enteros\[iterador\] = asciiNumero; )/,/^(?:enteros\[iterador\] = 45;)/,/^(?:ascii = enteros\[iterador\];)/,/^(?:asciiNumero = fmod\(vdecimales , 10\);)/,/^(?:decimales\[iterador\] = asciiNumero;)/,/^(?:decimales\[iterador\] = 46;)/,/^(?:ascii = decimales\[iterador\];)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Optimizacion;
exports.Parser = Optimizacion.Parser;
exports.parse = function () { return Optimizacion.parse.apply(Optimizacion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}