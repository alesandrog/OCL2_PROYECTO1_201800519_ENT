/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,18],$V2=[1,19],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,24],$V7=[1,25],$V8=[1,31],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,30],$Vd=[1,29],$Ve=[1,32],$Vf=[1,33],$Vg=[2,5,22,25,26,27,30,33,41,42,54,61,65,66,67,71,72,73,79,108],$Vh=[1,49],$Vi=[1,59],$Vj=[1,60],$Vk=[1,46],$Vl=[1,47],$Vm=[1,50],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,67],$Vu=[1,66],$Vv=[1,69],$Vw=[1,65],$Vx=[1,75],$Vy=[1,87],$Vz=[1,85],$VA=[1,86],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[10,24,34,41,44,46,82,83,84,85,86,87,88,89,90,91,92,93,94,95,112],$VN=[1,111],$VO=[1,114],$VP=[1,115],$VQ=[10,24,34,37,41,43,44,46,55,82,83,84,85,86,87,88,89,90,91,92,93,94,95,112],$VR=[1,158],$VS=[24,44,46],$VT=[1,162],$VU=[10,24],$VV=[1,167],$VW=[1,175],$VX=[1,171],$VY=[1,172],$VZ=[1,173],$V_=[1,174],$V$=[2,5,22,25,26,27,30,33,41,42,54,61,64,65,66,67,71,72,73,79,108],$V01=[1,192],$V11=[10,24,34,41,44,46,82,84,88,89,90,91,92,93,94,95,112],$V21=[10,24,34,41,44,46,82,84,85,87,88,89,90,91,92,93,94,95,112],$V31=[10,24,34,41,44,46,88,89,90,91,92,93,94,95,112],$V41=[10,24,34,41,44,46,92,93,94,95,112],$V51=[1,201],$V61=[1,205],$V71=[41,46],$V81=[1,210],$V91=[10,24,37,39,41,43,46,77,78],$Va1=[77,78],$Vb1=[24,46],$Vc1=[1,232],$Vd1=[10,24,41,46],$Ve1=[44,46],$Vf1=[1,238],$Vg1=[1,245],$Vh1=[1,262],$Vi1=[1,274],$Vj1=[10,24,37,41,43,46],$Vk1=[41,71,72],$Vl1=[1,313];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"If":8,"Pushear":9,";":10,"asignacion":11,"While":12,"DoWhile":13,"For":14,"Switch":15,"Console":16,"funcion":17,"Type":18,"llamadaFuncion":19,"ForIn":20,"ForOf":21,"GRAFICAR":22,"(":23,")":24,"BREAK":25,"CONTINUE":26,"RETURN":27,"ternario":28,"Expr":29,"ID":30,"++":31,"--":32,"LET":33,":":34,"tipo":35,"corchetes":36,"=":37,"corchetesVacios":38,"{":39,"atributosType":40,"}":41,"CONST":42,"[":43,"]":44,"masCorchetes":45,",":46,"corcheteFinal":47,"NUMBER":48,"STRING":49,"BOOLEAN":50,"VOID":51,"accesos":52,"+=":53,"CONSOLE":54,".":55,"LOG":56,"ListaConsole":57,"PUSH":58,"Length":59,"LENGTH":60,"IF":61,"BloqueInstrucciones":62,"Else":63,"ELSE":64,"WHILE":65,"DO":66,"SWITCH":67,"BloqueCase":68,"Default":69,"Case":70,"CASE":71,"DEFAULT":72,"FOR":73,"DeclaracionFor":74,"IncrementoFor":75,"declaracion_for":76,"IN":77,"OF":78,"FUNCTION":79,"parametros":80,"parametro":81,"-":82,"**":83,"+":84,"*":85,"%":86,"/":87,"<":88,"<=":89,">":90,">=":91,"==":92,"!=":93,"&&":94,"||":95,"!":96,"F":97,"DECIMAL":98,"ENTERO":99,"CADENA":100,"CADENASIM":101,"TRUE":102,"FALSE":103,"NULL":104,"paramsExp":105,"acceso":106,"POP":107,"TYPE":108,"decla_atr_type":109,"atr_type":110,"atribType":111,"?":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",22:"GRAFICAR",23:"(",24:")",25:"BREAK",26:"CONTINUE",27:"RETURN",30:"ID",31:"++",32:"--",33:"LET",34:":",37:"=",39:"{",41:"}",42:"CONST",43:"[",44:"]",46:",",48:"NUMBER",49:"STRING",50:"BOOLEAN",51:"VOID",53:"+=",54:"CONSOLE",55:".",56:"LOG",58:"PUSH",60:"LENGTH",61:"IF",64:"ELSE",65:"WHILE",66:"DO",67:"SWITCH",71:"CASE",72:"DEFAULT",73:"FOR",77:"IN",78:"OF",79:"FUNCTION",82:"-",83:"**",84:"+",85:"*",86:"%",87:"/",88:"<",89:"<=",90:">",91:">=",92:"==",93:"!=",94:"&&",95:"||",96:"!",98:"DECIMAL",99:"ENTERO",100:"CADENA",101:"CADENASIM",102:"TRUE",103:"FALSE",104:"NULL",107:"POP",108:"TYPE",112:"?"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,4],[6,2],[6,2],[6,3],[6,3],[6,2],[6,3],[6,3],[6,1],[7,8],[7,8],[7,9],[7,6],[7,7],[7,5],[7,8],[7,8],[7,7],[36,3],[36,2],[38,3],[38,2],[45,3],[45,1],[47,3],[47,2],[35,1],[35,1],[35,1],[35,1],[35,1],[11,4],[11,4],[11,3],[11,5],[11,3],[16,7],[57,3],[57,1],[9,7],[9,6],[59,4],[59,3],[8,6],[63,2],[63,2],[63,0],[12,5],[13,7],[15,8],[68,2],[68,1],[70,4],[69,3],[69,0],[14,9],[75,1],[75,2],[75,2],[74,4],[74,3],[20,7],[21,7],[76,4],[76,2],[76,4],[76,2],[62,3],[62,2],[17,10],[17,9],[17,9],[17,8],[80,3],[80,1],[81,4],[81,3],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[97,3],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,2],[97,2],[97,2],[97,3],[97,1],[52,2],[52,1],[106,2],[106,3],[106,4],[19,4],[19,3],[105,3],[105,1],[18,6],[109,3],[109,1],[110,4],[110,3],[110,3],[40,3],[40,1],[111,3],[111,3],[28,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 68:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 56: case 69: case 92: case 135: case 138: case 143:

        this.$ = [$$[$0]];
    
break;
case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 38: case 39: case 41: case 42: case 43: case 49: case 50: case 51: case 52: case 57: case 58: case 59: case 60: case 61: case 65: case 66: case 67: case 70: case 75: case 76: case 78: case 79: case 80: case 85: case 87: case 88: case 89: case 90: case 93: case 94: case 106: case 107: case 108: case 109: case 110: case 115: case 116: case 119: case 122: case 123: case 124: case 127: case 129: case 130: case 132: case 133: case 136: case 139: case 140: case 141: case 144: case 145: case 146:


    
break;
case 26: case 27: case 73: case 77: case 96: case 125:
 

    
break;
case 28:
 
        /* let arr : number[][] = [[5]];*/        

    
break;
case 29:
 
        /* let arr : aidi = { value : piola };*/

    
break;
case 30:
 
        /* let arr : number[][]; */

    
break;
case 31:
 
        this.$ = new Declaracion($$[$0-3],$$[$0-5],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
    
break;
case 32: case 81: case 82: case 83: case 84:
 
        /* let arr : number;*/        

    
break;
case 33: case 34:
 
        /* const arr : number[][] = [[5]];*/

    
break;
case 35:
 
        /* const arr : number = 5;*/

    
break;
case 36:

        var cantidad = eval('$$[$0-2]');
        this.$ = parseInt( cantidad++);
    
break;
case 37:

        this.$ = 1;
    
break;
case 40:
        

    
break;
case 44:

        this.$  = new Tipo(Tipos.NUMBER);
    
break;
case 45:

        this.$  = new Tipo(Tipos.STRING);
    
break;
case 46:

        this.$  = new Tipo(Tipos.BOOLEAN);
    
break;
case 47:

        this.$  = new Tipo(Tipos.VOID);
    
break;
case 48:

        
    
break;
case 53:

        var idAsig = new AccesoAsig($$[$0-2], null,  _$[$0-2].first_line, _$[$0-2].first_column);
        this.$ = new Asignacion(idAsig, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 55: case 91: case 137: case 142:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 62: case 63: case 71: case 74: case 111:

        this.$ = $$[$0];
    
break;
case 64: case 72: case 86:

        this.$ = null;
    
break;
case 95:

  
    
break;
case 97:

        this.$ = new Mas($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 98:

        this.$ = new Menos($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 99:
 
        this.$ = new Por($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 100:
 
        this.$ = new Modulo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 101:

        this.$ = new Div($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 102:

        this.$ = new Menor(false, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 103:

        this.$ = new Menor(true, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 104:

        this.$ = new Mayor(false, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 105:

        this.$ = new Mayor(true, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 112:
 
        this.$ = $$[$0-1];
    
break;
case 113: case 114:
 
        this.$ = new Primitivo(Tipos.NUMBER, $$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 117:
 
        this.$ = new Primitivo(Tipos.BOOLEAN, true, _$[$0].first_line, _$[$0].first_column); 
    
break;
case 118:
 
        this.$ = new Primitivo(Tipos.BOOLEAN, false, _$[$0].first_line, _$[$0].first_column); 
    
break;
case 126:

        this.$ = new Acceso($$[$0],_$[$0].first_line,_$[$0].first_column);
    
break;
case 131:



    
break;
case 134:

        if($$[$0] != "null"){
        $$[$0-2].push($$[$0]);
        }
        this.$ = $$[$0-2];
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,108:$Vf},{1:[3]},{2:$V0,5:[1,34],6:35,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,108:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),{10:[1,36]},{10:[1,37]},o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),{10:[1,38]},{10:[1,39]},o($Vg,[2,16]),o($Vg,[2,17]),{23:[1,40]},{10:[1,41]},{10:[1,42]},{10:[1,45],19:58,23:$Vh,28:43,29:44,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{23:$Vt,31:[1,61],32:[1,62],37:$Vu,43:$Vv,52:63,53:$Vw,55:[1,64],106:68},o($Vg,[2,26]),{30:[1,70]},{30:[1,71]},{23:[1,72]},{23:[1,73]},{39:$Vx,62:74},{23:[1,76]},{23:[1,77]},{55:[1,78]},{30:[1,79]},{30:[1,80]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,14]),o($Vg,[2,15]),{24:[1,81]},o($Vg,[2,19]),o($Vg,[2,20]),{10:[1,82]},{10:[1,83],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,112:[1,84]},o($Vg,[2,23]),{19:58,23:$Vh,29:99,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:100,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($VM,[2,111]),{19:58,23:$Vh,29:101,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($VM,[2,113]),o($VM,[2,114]),o($VM,[2,115]),o($VM,[2,116]),o($VM,[2,117]),o($VM,[2,118]),o($VM,[2,119]),o($VM,[2,120]),o($VM,[2,121]),o($VM,[2,126],{106:68,52:102,23:$Vt,31:[1,103],32:[1,104],43:$Vv,55:[1,105]}),{19:58,23:$Vh,29:107,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:106},{10:[1,108]},{10:[1,109]},{37:$VN,43:$Vv,55:[1,110],106:112},{30:$VO,58:[1,113],107:$VP},{19:58,23:$Vh,29:116,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:118,30:$Vi,39:[1,117],43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,24:[1,120],29:107,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:119},o($VQ,[2,128]),{19:58,23:$Vh,29:121,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{34:[1,122]},{34:[1,123]},{19:58,23:$Vh,29:124,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:125,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{65:[1,126]},{2:$V0,4:127,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,128],42:$V7,54:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,108:$Vf},{30:[1,132],33:[1,131],42:[1,133],74:129,76:130},{19:58,23:$Vh,29:134,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{56:[1,135]},{23:[1,136]},{37:[1,137]},{10:[1,138]},o($Vg,[2,21]),o($Vg,[2,22]),{19:58,23:$Vh,29:139,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:140,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:141,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:142,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:143,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:144,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:145,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:146,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:147,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:148,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:149,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:150,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:151,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:152,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:153,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($VM,[2,95]),o($VM,[2,110]),{24:[1,154],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},o($VM,[2,122],{106:112,43:$Vv,55:[1,155]}),o($VM,[2,123]),o($VM,[2,124]),{30:$VO,60:[1,156],107:$VP},{44:[1,157],46:$VR},o($VS,[2,135],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($Vg,[2,24]),o($Vg,[2,25]),{30:$VO,58:[1,159],107:$VP},{19:58,23:$Vh,29:161,30:$Vi,38:160,43:$VT,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($VQ,[2,127]),{23:[1,163]},o($VQ,[2,129]),{23:[1,164]},o($VU,[2,51],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),{30:$VV,40:165,111:166},o($VU,[2,53],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),{24:[1,168],46:$VR},o($VM,[2,133]),{44:[1,169],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},{30:$VW,35:170,48:$VX,49:$VY,50:$VZ,51:$V_},{30:$VW,35:176,48:$VX,49:$VY,50:$VZ,51:$V_},{24:[1,177],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},{24:[1,178],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},{23:[1,179]},{2:$V0,6:35,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,180],42:$V7,54:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,108:$Vf},o($V$,[2,86]),{10:[1,181]},{77:[1,182],78:[1,183]},{30:[1,184]},{37:[1,185]},{30:[1,186]},{24:[1,187],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},{23:[1,188]},{24:[1,190],30:$V01,80:189,81:191},{39:[1,193]},o($Vg,[2,18]),{34:[1,194],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},o([10,24,34,41,44,46,82,83,84,85,87,88,89,90,91,92,93,94,95,112],[2,96],{86:$VC}),o($V11,[2,97],{83:$Vz,85:$VB,86:$VC,87:$VD}),o($V11,[2,98],{83:$Vz,85:$VB,86:$VC,87:$VD}),o($V21,[2,99],{83:$Vz,86:$VC}),o($VM,[2,100]),o($V21,[2,101],{83:$Vz,86:$VC}),o($V31,[2,102],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD}),o($V31,[2,103],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD}),o($V31,[2,104],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD}),o($V31,[2,105],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD}),o($V41,[2,106],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH}),o($V41,[2,107],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH}),o([10,24,34,41,44,46,94,95,112],[2,108],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ}),o([10,24,34,41,44,46,95,112],[2,109],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK}),o($VM,[2,112]),{30:$VO,60:[1,195],107:$VP},o($VM,[2,60]),o($VM,[2,125]),{19:58,23:$Vh,29:196,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{23:[1,197]},o($VU,[2,49]),o($VU,[2,50],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),{19:58,23:$Vh,29:107,30:$Vi,43:$V51,44:[1,199],45:198,47:200,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:106},{19:58,23:$Vh,29:202,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{24:[1,203]},{41:[1,204],46:$V61},o($V71,[2,143]),{34:[1,206]},o($VM,[2,132]),o($VQ,[2,130]),{10:[1,209],36:207,37:[1,208],43:$V81},o($V91,[2,44]),o($V91,[2,45]),o($V91,[2,46]),o($V91,[2,47]),o($V91,[2,48]),{36:211,37:[1,212],43:$V81},{39:$Vx,62:213},{39:$Vx,62:214},{19:58,23:$Vh,29:215,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($V$,[2,85]),{19:58,23:$Vh,29:216,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:217,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{19:58,23:$Vh,29:218,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($Va1,[2,82],{34:[1,220],37:[1,219]}),{19:58,23:$Vh,29:221,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($Va1,[2,84],{34:[1,222]}),{39:[1,223]},{19:58,23:$Vh,29:225,30:$Vi,43:$Vj,57:224,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{24:[1,226],46:[1,227]},{34:[1,228]},o($Vb1,[2,92]),{34:[1,229]},{30:$Vc1,109:230,110:231},{19:58,23:$Vh,29:233,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($VM,[2,59]),o($VS,[2,134],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),{19:58,23:$Vh,29:234,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{44:[1,235],46:[1,236]},o($Vd1,[2,39]),o($Ve1,[2,41]),{19:58,23:$Vh,29:107,30:$Vi,43:$V51,44:$Vf1,47:237,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:106},{24:[1,239],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},o($VQ,[2,131]),o($VU,[2,52]),{30:$VV,111:240},{19:58,23:$Vh,29:242,30:$Vi,38:241,43:$VT,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{10:[1,244],37:[1,243],43:$Vg1},{19:58,23:$Vh,29:247,30:$Vi,39:[1,246],43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($Vg,[2,32]),{44:[1,248]},{37:[1,249],43:$Vg1},{19:58,23:$Vh,29:250,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($Vg,[2,64],{63:251,64:[1,252]}),o($Vg,[2,65]),{24:[1,253],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},{10:[1,254],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},{24:[1,255],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},{24:[1,256],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},{19:58,23:$Vh,29:257,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{30:$VW,35:258,48:$VX,49:$VY,50:$VZ,51:$V_},{10:[2,78],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},{30:$VW,35:259,48:$VX,49:$VY,50:$VZ,51:$V_},{68:260,70:261,71:$Vh1},{24:[1,263],46:[1,264]},o($Vb1,[2,56],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),{34:[1,265]},{30:$V01,81:266},{30:$VW,35:267,48:$VX,49:$VY,50:$VZ,51:$V_},{30:$VW,35:268,48:$VX,49:$VY,50:$VZ,51:$V_},{41:[1,269],46:[1,270]},o($V71,[2,138]),{34:[1,271]},{10:[2,146],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},{24:[1,272],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},o($Vd1,[2,38]),{43:$Vi1,47:273},{44:[1,275]},o($Ve1,[2,43]),{10:[2,58]},o($V71,[2,142]),o($V71,[2,144]),o($V71,[2,145],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),{19:58,23:$Vh,29:277,30:$Vi,38:276,43:$VT,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},o($Vg,[2,30]),{44:[1,278]},{30:$VV,40:279,111:166},{10:[1,280],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},o($Vj1,[2,37]),{19:58,23:$Vh,29:282,30:$Vi,38:281,43:$VT,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{10:[1,283],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},o($Vg,[2,61]),{8:284,39:$Vx,61:$V9,62:285},{10:[1,286]},{11:288,30:[1,289],75:287},{39:$Vx,62:290},{39:$Vx,62:291},{10:[2,77],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},o($Va1,[2,81]),o($Va1,[2,83]),{41:[2,72],69:292,70:293,71:$Vh1,72:[1,294]},o($Vk1,[2,69]),{19:58,23:$Vh,29:295,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{10:[1,296]},{19:58,23:$Vh,29:297,30:$Vi,43:$Vj,59:57,82:$Vk,96:$Vl,97:48,98:$Vm,99:$Vn,100:$Vo,101:$Vp,102:$Vq,103:$Vr,104:$Vs},{30:$VW,35:298,48:$VX,49:$VY,50:$VZ,51:$V_},o($Vb1,[2,91]),{39:[1,299]},o($Vb1,[2,94],{36:300,43:$V81}),{10:[2,136]},{30:$Vc1,110:301},{30:$VW,35:302,36:303,43:$V81,48:$VX,49:$VY,50:$VZ,51:$V_},{10:[2,57]},o($Ve1,[2,40]),{43:$Vi1,44:$Vf1,47:237},o($Ve1,[2,42]),{10:[1,304]},{10:[1,305],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},o($Vj1,[2,36]),{41:[1,306],46:$V61},o($Vg,[2,31]),{10:[1,307]},{10:[1,308],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},o($Vg,[2,35]),o($Vg,[2,62]),o($Vg,[2,63]),o($Vg,[2,66]),{24:[1,309]},{24:[2,74]},{31:[1,310],32:[1,311],37:$Vu,43:$Vv,52:312,53:$Vw,55:$Vl1,106:68},o($Vg,[2,79]),o($Vg,[2,80]),{41:[1,314]},o($Vk1,[2,68]),{34:[1,315]},{34:[1,316],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL},o($Vg,[2,54]),o($Vb1,[2,55],{82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),{39:[1,317]},{2:$V0,4:318,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,319],42:$V7,54:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,108:$Vf},o($Vb1,[2,93],{43:$Vg1}),o($V71,[2,137]),o($V71,[2,141],{36:320,43:$V81}),o($V71,[2,140],{43:$Vg1}),o($Vg,[2,27]),o($Vg,[2,28]),{10:[1,321]},o($Vg,[2,33]),o($Vg,[2,34]),{39:$Vx,62:322},{24:[2,75]},{24:[2,76]},{37:$VN,43:$Vv,55:$Vl1,106:112},{30:$VO,107:$VP},o($Vg,[2,67]),{2:$V0,4:323,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,108:$Vf},{2:$V0,4:324,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,108:$Vf},{2:$V0,4:325,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,326],42:$V7,54:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,108:$Vf},{2:$V0,6:35,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,327],42:$V7,54:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,108:$Vf},o($Vg,[2,90]),o($V71,[2,139],{43:$Vg1}),o($Vg,[2,29]),o($Vg,[2,73]),{2:$V0,6:35,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[2,71],42:$V7,54:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,108:$Vf},o($Vk1,[2,70],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,6:35,2:$V0,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,42:$V7,54:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,108:$Vf}),{2:$V0,6:35,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,25:$V2,26:$V3,27:$V4,30:$V5,33:$V6,41:[1,328],42:$V7,54:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,108:$Vf},o($Vg,[2,89]),o($Vg,[2,88]),o($Vg,[2,87])],
defaultActions: {34:[2,1],239:[2,58],269:[2,136],272:[2,57],288:[2,74],310:[2,75],311:[2,76]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    /*=====================================ABSTRACT==============================================*/


    const { Simbolo } = require('../TablaSimbolos/Simbolo');

    /*===================================== UTIL =================================================*/

    const { Tipos, Tipo } = require('../Util/Tipo');
    
    /*=====================================EXPRESION==============================================*/

    //Valores
    const { Primitivo } = require('../Expresion/Literal/Primitivo');
    const { Acceso } = require('../Expresion/Acceso/Acceso');        
    const { AccesoAsig } = require('../Expresion/Literal/AccesoAsig');        


    //Aritmeticas
    const { Mas } = require('../Expresion/Aritmetica/Mas');
    const { Menos } = require('../Expresion/Aritmetica/Menos');
    const { Div } = require('../Expresion/Aritmetica/Div');
    const { Por } = require('../Expresion/Aritmetica/Por');
    const { Modulo} = require('../Expresion/Aritmetica/Modulo');
    
    //Logicas

    //Relacionales
    const { Mayor } = require('../Expresion/Relacional/Mayor');
    const { Menor } = require('../Expresion/Relacional/Menor');

    /*=====================================INSTRUCCION==============================================*/

    const { Declaracion } = require('../Instruccion/Variables/Declaracion');
    const { Asignacion } = require('../Instruccion/Variables/Asignacion');    
 

    /*MANEJO DE TYPES-------------------------------------------------------*/
  
    /*MANEJO DE ERRORES-------------------------------------------------------*/
  

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 98
break;
case 4:return 99
break;
case 5:return 100
break;
case 6:return 101
break;
case 7:return 83
break;
case 8:return 85
break;
case 9:return 87
break;
case 10:return 53
break;
case 11:return 31
break;
case 12:return 32
break;
case 13:return 82
break;
case 14:return 84
break;
case 15:return '^'
break;
case 16:return 86
break;
case 17:return 89
break;
case 18:return 91
break;
case 19:return 88
break;
case 20:return 90
break;
case 21:return 92
break;
case 22:return 93
break;
case 23:return 37
break;
case 24:return 95
break;
case 25:return 94
break;
case 26:return 96
break;
case 27:return 23
break;
case 28:return 24 
break;
case 29:return 39
break;
case 30:return 41
break;
case 31:return 10
break;
case 32:return 34
break;
case 33:return 43
break;
case 34:return 44
break;
case 35:return 46
break;
case 36:return 55
break;
case 37:return '`'
break;
case 38:return '$'
break;
case 39:return 112
break;
case 40:return '"'
break;
case 41:return '\''
break;
case 42:return 61
break;
case 43:return 64
break;
case 44:return 67
break;
case 45:return 71
break;
case 46:return 72
break;
case 47:return 65
break;
case 48:return 66
break;
case 49:return 73
break;
case 50:return 77
break;
case 51:return 78
break;
case 52:return 102
break;
case 53:return 103
break;
case 54:return 27
break;
case 55:return 25
break;
case 56:return 26
break;
case 57:return 79
break;
case 58:return 33
break;
case 59:return 42
break;
case 60:return 54
break;
case 61:return 56
break;
case 62:return 22
break;
case 63:return 58
break;
case 64:return 107
break;
case 65:return 60
break;
case 66:return 51
break;
case 67:return 48
break;
case 68:return 49
break;
case 69:return 50
break;
case 70:return 108
break;
case 71:return 104
break;
case 72:return 30;
break;
case 73:return 5
break;
case 74: 
   // let error_lexico = new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico', yy_.yytext);
   // errores.push(error_lexico);
    
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:(([0-9]+)\.([0-9]+)))/,/^(?:([0-9]+))/,/^(?:(("[^"]*")))/,/^(?:(('[^']*')))/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?:`)/,/^(?:\$)/,/^(?:\?)/,/^(?:")/,/^(?:\\')/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:function\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:void\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}