/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,19],$V2=[1,20],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[1,25],$V7=[1,26],$V8=[1,32],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,31],$Vd=[1,30],$Ve=[1,33],$Vf=[1,34],$Vg=[2,5,23,26,27,28,31,34,42,43,55,61,65,66,67,71,72,73,79,114],$Vh=[1,51],$Vi=[1,62],$Vj=[1,63],$Vk=[1,48],$Vl=[1,49],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,56],$Vr=[1,57],$Vs=[1,58],$Vt=[1,70],$Vu=[1,68],$Vv=[1,72],$Vw=[1,67],$Vx=[1,69],$Vy=[1,78],$Vz=[1,90],$VA=[1,89],$VB=[1,91],$VC=[1,92],$VD=[1,93],$VE=[1,94],$VF=[1,95],$VG=[1,96],$VH=[1,97],$VI=[1,98],$VJ=[1,99],$VK=[1,100],$VL=[1,101],$VM=[1,102],$VN=[1,88],$VO=[10,25,35,42,45,47,90,91,92,93,94,95,96,97,98,99,100,101,102,103,118],$VP=[1,113],$VQ=[1,114],$VR=[1,121],$VS=[10,25,35,38,42,44,45,47,56,90,91,92,93,94,95,96,97,98,99,100,101,102,103,118],$VT=[1,161],$VU=[25,45,47],$VV=[1,165],$VW=[10,25],$VX=[1,170],$VY=[1,179],$VZ=[1,175],$V_=[1,176],$V$=[1,177],$V01=[1,178],$V11=[2,5,23,26,27,28,31,34,42,43,55,61,64,65,66,67,71,72,73,79,114],$V21=[2,94],$V31=[1,198],$V41=[10,25,35,42,45,47,90,91,96,97,98,99,100,101,102,103,118],$V51=[10,25,35,42,45,47,90,91,93,95,96,97,98,99,100,101,102,103,118],$V61=[10,25,35,42,45,47,96,97,98,99,100,101,102,103,118],$V71=[10,25,35,42,45,47,100,101,102,103,118],$V81=[1,206],$V91=[1,209],$Va1=[42,47],$Vb1=[1,215],$Vc1=[10,25,38,40,42,44,47],$Vd1=[77,78],$Ve1=[25,47],$Vf1=[1,237],$Vg1=[45,47],$Vh1=[1,243],$Vi1=[1,250],$Vj1=[1,266],$Vk1=[1,270],$Vl1=[2,96],$Vm1=[1,277],$Vn1=[10,25,38,44,47],$Vo1=[42,71,72],$Vp1=[1,316],$Vq1=[1,337],$Vr1=[1,338],$Vs1=[1,339],$Vt1=[1,340],$Vu1=[1,341],$Vv1=[1,342],$Vw1=[23,26,27,28,31,34,42,43,55,61,65,66,67,73,79,114];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"If":8,"asignacion":9,";":10,"Push":11,"Length":12,"While":13,"DoWhile":14,"For":15,"Switch":16,"Console":17,"funcion":18,"Type":19,"llamadaFuncion":20,"ForIn":21,"ForOf":22,"GRAFICAR":23,"(":24,")":25,"BREAK":26,"CONTINUE":27,"RETURN":28,"ternario":29,"Expr":30,"ID":31,"++":32,"--":33,"LET":34,":":35,"tipo":36,"corchetes":37,"=":38,"corchetesVacios":39,"{":40,"atributosType":41,"}":42,"CONST":43,"[":44,"]":45,"masCorchetes":46,",":47,"corcheteFinal":48,"NUMBER":49,"STRING":50,"BOOLEAN":51,"VOID":52,"accesos":53,"+=":54,"CONSOLE":55,".":56,"LOG":57,"ListaConsole":58,"PUSH":59,"LENGTH":60,"IF":61,"BloqueInstrucciones":62,"Else":63,"ELSE":64,"WHILE":65,"DO":66,"SWITCH":67,"BloqueCase":68,"Default":69,"Case":70,"CASE":71,"DEFAULT":72,"FOR":73,"DeclaracionFor":74,"IncrementoFor":75,"DeclaracionForIn":76,"IN":77,"OF":78,"FUNCTION":79,"idFuncion":80,"parametrosFuncion":81,"tipoFuncion":82,"InstruccionesFun":83,"parametros":84,"instrFun":85,"funcionFun":86,"idFunAnid":87,"parametro":88,"paramsExp":89,"-":90,"+":91,"**":92,"*":93,"%":94,"/":95,"<":96,"<=":97,">":98,">=":99,"==":100,"!=":101,"&&":102,"||":103,"!":104,"F":105,"DECIMAL":106,"ENTERO":107,"CADENA":108,"CADENASIM":109,"TRUE":110,"FALSE":111,"NULL":112,"acceso":113,"TYPE":114,"decla_atr_type":115,"atr_type":116,"atribType":117,"?":118,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",23:"GRAFICAR",24:"(",25:")",26:"BREAK",27:"CONTINUE",28:"RETURN",31:"ID",32:"++",33:"--",34:"LET",35:":",38:"=",40:"{",42:"}",43:"CONST",44:"[",45:"]",47:",",49:"NUMBER",50:"STRING",51:"BOOLEAN",52:"VOID",54:"+=",55:"CONSOLE",56:".",57:"LOG",59:"PUSH",60:"LENGTH",61:"IF",64:"ELSE",65:"WHILE",66:"DO",67:"SWITCH",71:"CASE",72:"DEFAULT",73:"FOR",77:"IN",78:"OF",79:"FUNCTION",90:"-",91:"+",92:"**",93:"*",94:"%",95:"/",96:"<",97:"<=",98:">",99:">=",100:"==",101:"!=",102:"&&",103:"||",104:"!",106:"DECIMAL",107:"ENTERO",108:"CADENA",109:"CADENASIM",110:"TRUE",111:"FALSE",112:"NULL",114:"TYPE",118:"?"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,3],[6,2],[6,2],[6,3],[6,3],[6,2],[6,3],[6,3],[6,1],[7,8],[7,8],[7,9],[7,6],[7,7],[7,5],[7,5],[7,3],[7,8],[7,8],[7,7],[7,5],[37,3],[37,2],[39,3],[39,2],[46,3],[46,1],[48,3],[48,2],[36,1],[36,1],[36,1],[36,1],[36,1],[9,4],[9,6],[9,4],[9,3],[9,5],[9,3],[17,7],[58,3],[58,1],[11,7],[11,6],[12,4],[12,3],[8,6],[63,2],[63,2],[63,0],[13,5],[14,7],[16,8],[68,2],[68,1],[70,4],[69,3],[69,0],[15,9],[75,1],[75,2],[75,2],[74,4],[74,4],[74,3],[21,7],[22,7],[76,2],[76,2],[62,3],[62,2],[18,9],[80,1],[81,1],[81,0],[82,2],[82,0],[83,2],[83,1],[85,1],[85,1],[85,2],[85,2],[85,2],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[85,2],[85,2],[85,1],[85,1],[85,3],[85,2],[85,2],[85,3],[85,3],[85,2],[85,3],[85,3],[86,9],[87,1],[84,3],[84,1],[88,4],[88,3],[20,4],[20,3],[89,3],[89,1],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,1],[105,3],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,2],[105,2],[105,2],[105,3],[105,1],[53,2],[53,1],[113,2],[113,3],[19,6],[115,3],[115,1],[116,3],[41,3],[41,1],[117,3],[29,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 73: case 165:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 45: case 61: case 74: case 131: case 166: case 171: case 174:

        this.$ = [$$[$0]];
    
break;
case 6:

        $$[$0-1].ptComa = ";"
        this.$ = $$[$0-1];
    
break;
case 7: case 102:

        var pushpt = eval('$$[$0-1]');
        pushpt.puntoC = ";";
        this.$ = pushpt;
    
break;
case 8: case 103:

        var lengthpt = eval('$$[$0-1]');
        lengthpt.puntoC = ";";
        this.$ = lengthpt;
    
break;
case 16: case 111:

        $$[$0-1].puntoc = ";";
        this.$ = $$[$0-1];
    
break;
case 19: case 114:

         this.$ = new LiteralT("graficar_ts();");
    
break;
case 20: case 115:

        this.$ = new SentenciaSalidaT(2, null);
    
break;
case 21: case 116:

        this.$ = new SentenciaSalidaT(3, null);
    
break;
case 22: case 23: case 117: case 118:

        this.$ = new SentenciaSalidaT(1, $$[$0-1]);
    
break;
case 24: case 119:

        this.$ = new SentenciaSalidaT(1, null);
    
break;
case 25: case 26: case 120: case 121:

        this.$ = new IncrementoT($$[$0-2] , $$[$0-1], ";");
    
break;
case 27:
 
    let error_sint = new Error_(this._$.first_line, this._$.first_column, 'Sintactico', yytext);
    errores.push(error_sint);
    
break;
case 28: case 29:
 
        this.$ = new DeclaracionT($$[$0-6], `${$$[$0-4]}${$$[$0-3]}`, "let", $$[$0-1] );
    
break;
case 30:
 
        this.$ = new VariableTypeT($$[$0-7], $$[$0-5], "let", $$[$0-2] );
    
break;
case 31:
 
        this.$ = new DeclaracionT($$[$0-4], `${$$[$0-2]}${$$[$0-1]}`, "let", null );
    
break;
case 32:
 
        this.$ = new DeclaracionT($$[$0-5], `${$$[$0-3]}`, "let", $$[$0-1] );
    
break;
case 33:
 
        this.$ = new DeclaracionT($$[$0-3], `${$$[$0-1]}`, "let", null );
    
break;
case 34:

        this.$ = new DeclaracionT($$[$0-3], "", "let", $$[$0-1] );
    
break;
case 35:

        this.$ = new DeclaracionT($$[$0-1], "", "let", null );
    
break;
case 36:
 
        /* const arr : number[][] = [[5]];*/
        this.$ = new DeclaracionT($$[$0-6], `${$$[$0-4]}${$$[$0-3]}`, "let", $$[$0-1] );
    
break;
case 37:
 
        this.$ = new DeclaracionT($$[$0-6], `${$$[$0-4]}${$$[$0-3]}`, "const", $$[$0-1] );
    
break;
case 38:
 
        this.$ = new DeclaracionT($$[$0-5], `${$$[$0-3]}`, "const", $$[$0-1] );
    
break;
case 39:
 
        this.$ = new DeclaracionT($$[$0-3], "", "const", $$[$0-1] );
    
break;
case 40:

        this.$ = $$[$0-2] + "[]";
    
break;
case 41:

        this.$ = "[]";
    
break;
case 42:

         this.$ = new Arreglo2T($$[$0-1]); 
    
break;
case 43:

         this.$ = new Arreglo2T(null); 
    
break;
case 44:
        
        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 46:

        let arrf = [$$[$0-1]]; 
         this.$ = new Arreglo2T(arrf);             
    
break;
case 47:

         this.$ = new Arreglo2T(null);
    
break;
case 48: case 49: case 50: case 51: case 52:

    
break;
case 53:

        var acc = new IdAccesoT($$[$0-3], $$[$0-2]);        
        this.$ = new AsignacionArrayT( acc , $$[$0] );
    
break;
case 54:

        var typeasig = new IdAccesoT($$[$0-5], $$[$0-4]);         
        this.$ = new AsignacionTypeT(typeasig , $$[$0-1]);
    
break;
case 55:

        var acc2 = new IdAccesoT($$[$0-3], $$[$0-2]);        
        this.$ = new AsignacionArrayT( acc2 , $$[$0] );
    
break;
case 56: case 58:

        this.$ = new AsignacionT($$[$0-2] , $$[$0], $$[$0-1]);
    
break;
case 57:

        this.$ = new AsignacionTypeT($$[$0-4] , $$[$0-1]);
    
break;
case 59:
   this.$ = new ConsoleT($$[$0-2]);
break;
case 60: case 130: case 170: case 173:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 62:

        let accL = new IdAccesoT($$[$0-6], 0);
        this.$ = newNat = new NativaArregloT(accL , 1, $$[$0-1]);
    
break;
case 63:

        this.$ = newNat = new NativaArregloT($$[$0-5] , 1, $$[$0-1]);
    
break;
case 64:

        let accL2 = new IdAccesoT($$[$0-3], $$[$0-2]);     
        this.$ = new NativaArregloT(accL2 , 0, null);
    
break;
case 65:

        this.$  = new NativaArregloT($$[$0-2] , 0, null);
    
break;
case 66:

        this.$ = new IfT($$[$0-3], $$[$0-1], $$[$0]);
    
break;
case 67: case 68: case 76: case 125: case 148:

        this.$ = $$[$0];
    
break;
case 69: case 77: case 90:

        this.$ = null;
    
break;
case 70:

        this.$ = new WhileT( $$[$0-2] , $$[$0], 1);
    
break;
case 71:

        this.$ = new WhileT( $$[$0-2] , $$[$0-5], 2);
    
break;
case 72:

        this.$ = new SwitchT( $$[$0-5] , $$[$0-2] , $$[$0-1]);
    
break;
case 75:

        this.$ = new CaseT( $$[$0-2] , $$[$0]);
    
break;
case 78:
 
        this.$ = new ForInOf( $$[$0-6], $$[$0-4] , $$[$0-2], $$[$0] , 0);
    
break;
case 79:

        this.$ = new AsignacionT($$[$0] , $$[$02], $$[$01]);
    
break;
case 80: case 81: case 161: case 162:

        this.$ = new IncrementoT($$[$0-1] , $$[$0], "");
    
break;
case 82:
 
        this.$ = new DeclaracionT($$[$0-2], "", "let", $$[$0] );
    
break;
case 83:
 
        this.$ = new DeclaracionT($$[$0-2], "", "const", $$[$0] );
    
break;
case 84:

        let asigptD = new AsignacionT($$[$0-2] , $$[$0], $$[$0-1]);
        asigptD.ptComa = ";"
        this.$ = asigptD;
    
break;
case 85:

        this.$ = new ForIn( $$[$0-4] , $$[$0-2], null,  $$[$0], 2);
    
break;
case 86:

        this.$ = new ForIn( $$[$0-4] , $$[$0-2], null,  $$[$0], 1);
    
break;
case 87:

        this.$ = new DeclaracionT($$[$0], "", "let", null );
    
break;
case 88:

        this.$ = new DeclaracionT($$[$0], "", "const", null );        
    
break;
case 89:

        this.$ = new BloqueInstruccionesT($$[$0-1]);
    
break;
case 91:

        this.$ = new FuncionT($$[$0-7].id, $$[$0-5], $$[$0-3], $$[$0-1], "", funcionesAnidadas );
        funcionesAnidadas = [];
    
break;
case 92:

        this.$ = {
            padre : "",
             id : $$[$0]
        };
    
break;
case 94: case 96:
 this.$ = ""; 
break;
case 95:
 this.$ = `:${$$[$0]}`; 
break;
case 97:

        var fnc = eval('$$[$0]');
        if(fnc instanceof FuncionT){
            console.log("entro donde debo");
            console.log($$[$0]);
            funcionesAnidadas.push($$[$0]);
        }else{
            console.log("no entro donde debo");
            console.log($$[$0]);
             $$[$0-1].push($$[$0]);
        }
        this.$ = $$[$0-1];
    
break;
case 98:
        
        var fnc = eval('$$[$0]');
        if(fnc instanceof FuncionT){
            console.log("entro donde debo");
            console.log($$[$0]);
            funcionesAnidadas.push($$[$0]);
            this.$ = [];
        }else{
             this.$ = [$$[$0]];
        }
    
break;
case 101:

        var asigpt = eval('$$[$0-1]');
        asigpt.ptComa = ";";
        this.$ = asigpt;
    
break;
case 122:

        this.$ = new FuncionT($$[$0-7].value, $$[$0-5], $$[$0-3], $$[$0-1], $$[$0-7].padre );
    
break;
case 123:

        //pushear a map traducidas
        var pila = eval('$$');
        var tope = pila.length - 1;
        console.log("================================ PILA");
        console.log(pila[tope - 2]);
        if(pila[tope - 2] == '{'){
            this.$ = { padre : pila[tope - 7].id, id: pila[tope - 7].id + `_${$$[$0]}` , value : $$[$0]  }; 
        }else{
            this.$ = { padre : pila[tope - 8].id, id: pila[tope - 8].id + "_" + $$[$0] , value : $$[$0] }; 
        }
    
break;
case 124:

        this.$ = `${$$[$0-2]},${$$[$0]}`;
    
break;
case 126:

        this.$ = `${$$[$0-3]}:${$$[$0-1]}${$$[$0]}`;
    
break;
case 127:

        this.$ = `${$$[$0-2]}:${$$[$0]}`;
    
break;
case 128:

        this.$ = new LlamadaFuncionT($$[$0-3] , $$[$0-1]);
    
break;
case 129:

        this.$ = new LlamadaFuncionT($$[$0-2] , null);
    
break;
case 132: case 147:

        this.$ = new ExpresionUnariaT($$[$0], $$[$0-1]);
    
break;
case 133: case 134: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146:

        this.$ = new ExpresionBinariaT($$[$0-2] , $$[$0], $$[$0-1]);
    
break;
case 135: case 136: case 137:
 
        this.$ = new ExpresionBinariaT($$[$0-2] , $$[$0], $$[$0-1]);
    
break;
case 149:
 
        this.$ = new ExpresionUnariaT($$[$0-1], $$[$0-2]);
    
break;
case 150: case 151: case 154: case 155:
 
         this.$ = new LiteralT($$[$0]);
    
break;
case 152: case 153:

         this.$ = new LiteralT($$[$0]);        
    
break;
case 156: case 164:

         this.$ = new LiteralT($$[$0]);
    
break;
case 160:

        this.$ = new IdAccesoT($$[$0-1], $$[$0]);      
    
break;
case 163:
 
         this.$ = new Arreglo2T($$[$0-1]);

    
break;
case 167:

          this.$ = new AccesoT(1, $$[$0]);
    
break;
case 168:

          this.$ = new AccesoT(2, $$[$0-1]);
    
break;
case 169:

        this.$ = new TypeT($$[$0-4], $$[$0-1]);
    
break;
case 172: case 175:

        this.$ = new AtrTypeT(  $$[$0-2], $$[$0]);
    
break;
case 176:

        this.$ = new TernarioT($$[$0-4] , $$[$0-2], $$[$0]);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,27:$V3,28:$V4,31:$V5,34:$V6,43:$V7,55:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,114:$Vf},{1:[3]},{2:$V0,5:[1,35],6:36,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,27:$V3,28:$V4,31:$V5,34:$V6,43:$V7,55:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,114:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),{10:[1,37]},{10:[1,38]},{10:[1,39]},o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),{10:[1,40]},{10:[1,41]},o($Vg,[2,17]),o($Vg,[2,18]),{24:[1,42]},{10:[1,43]},{10:[1,44]},{10:[1,47],11:59,12:60,20:61,24:$Vh,29:45,30:46,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{24:$Vt,32:[1,64],33:[1,65],38:$Vu,44:$Vv,53:66,54:$Vw,56:$Vx,113:71},o($Vg,[2,27]),{31:[1,73]},{31:[1,74]},{24:[1,75]},{24:[1,76]},{40:$Vy,62:77},{24:[1,79]},{24:[1,80]},{56:[1,81]},{31:[1,83],80:82},{31:[1,84]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,15]),o($Vg,[2,16]),{25:[1,85]},o($Vg,[2,20]),o($Vg,[2,21]),{10:[1,86]},{10:[1,87],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,118:$VN},o($Vg,[2,24]),{11:59,12:60,20:61,24:$Vh,30:103,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:104,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($VO,[2,148]),{11:59,12:60,20:61,24:$Vh,30:105,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($VO,[2,150]),o($VO,[2,151]),o($VO,[2,152]),o($VO,[2,153]),o($VO,[2,154]),o($VO,[2,155]),o($VO,[2,156]),o($VO,[2,157]),o($VO,[2,158]),o($VO,[2,159]),o($VO,[2,164],{113:71,53:106,24:$Vt,32:[1,107],33:[1,108],44:$Vv,56:$Vx}),{11:59,12:60,20:61,24:$Vh,30:110,31:$Vi,44:$Vj,89:109,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{10:[1,111]},{10:[1,112]},{38:$VP,44:$Vv,56:$VQ,113:115},{11:59,12:60,20:61,24:$Vh,30:116,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:118,31:$Vi,40:[1,117],44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{31:$VR,59:[1,119],60:[1,120]},{11:59,12:60,20:61,24:$Vh,25:[1,123],30:110,31:$Vi,44:$Vj,89:122,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($VS,[2,166]),{11:59,12:60,20:61,24:$Vh,30:124,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{10:[1,127],35:[1,125],38:[1,126]},{35:[1,128],38:[1,129]},{11:59,12:60,20:61,24:$Vh,30:130,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:131,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{65:[1,132]},{2:$V0,4:133,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,27:$V3,28:$V4,31:$V5,34:$V6,42:[1,134],43:$V7,55:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,114:$Vf},{31:[1,139],34:[1,137],43:[1,138],74:135,76:136},{11:59,12:60,20:61,24:$Vh,30:140,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{57:[1,141]},{24:[1,142]},{24:[2,92]},{38:[1,143]},o($Vg,[2,19]),o($Vg,[2,22]),o($Vg,[2,23]),{11:59,12:60,20:61,24:$Vh,30:144,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:145,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:146,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:147,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:148,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:149,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:150,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:151,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:152,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:153,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:154,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:155,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:156,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:157,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:158,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($VO,[2,132]),o($VO,[2,147]),{25:[1,159],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},o($VO,[2,160],{113:115,44:$Vv,56:$VQ}),o($VO,[2,161]),o($VO,[2,162]),{45:[1,160],47:$VT},o($VU,[2,131],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM}),o($Vg,[2,25]),o($Vg,[2,26]),{11:59,12:60,20:61,24:$Vh,30:164,31:$Vi,39:162,40:[1,163],44:$VV,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{31:$VR,59:[1,166],60:[1,167]},o($VS,[2,165]),o($VW,[2,56],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM}),{31:$VX,41:168,117:169},o($VW,[2,58],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM}),{24:[1,171]},o($VO,[2,65]),o($VS,[2,167]),{25:[1,172],47:$VT},o($VO,[2,129]),{45:[1,173],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},{31:$VY,36:174,49:$VZ,50:$V_,51:$V$,52:$V01},{11:59,12:60,20:61,24:$Vh,30:180,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($Vg,[2,35]),{31:$VY,36:181,49:$VZ,50:$V_,51:$V$,52:$V01},{11:59,12:60,20:61,24:$Vh,30:182,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{25:[1,183],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},{25:[1,184],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},{24:[1,185]},{2:$V0,6:36,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,27:$V3,28:$V4,31:$V5,34:$V6,42:[1,186],43:$V7,55:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,114:$Vf},o($V11,[2,90]),{10:[1,187]},{77:[1,188],78:[1,189]},{31:[1,190]},{31:[1,191]},{38:[1,192]},{25:[1,193],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},{24:[1,194]},{25:$V21,31:$V31,81:195,84:196,88:197},{40:[1,199]},{35:[1,200],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},o($V41,[2,133],{92:$VB,93:$VC,94:$VD,95:$VE}),o($V41,[2,134],{92:$VB,93:$VC,94:$VD,95:$VE}),o([10,25,35,42,45,47,90,91,92,93,95,96,97,98,99,100,101,102,103,118],[2,135],{94:$VD}),o($V51,[2,136],{92:$VB,94:$VD}),o($VO,[2,137]),o($V51,[2,138],{92:$VB,94:$VD}),o($V61,[2,139],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE}),o($V61,[2,140],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE}),o($V61,[2,141],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE}),o($V61,[2,142],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE}),o($V71,[2,143],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI}),o($V71,[2,144],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI}),o([10,25,35,42,45,47,102,103,118],[2,145],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK}),o([10,25,35,42,45,47,103,118],[2,146],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL}),o($VO,[2,149]),o($VO,[2,163]),{11:59,12:60,20:61,24:$Vh,30:201,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($VW,[2,53]),{31:$VX,41:202,117:169},o($VW,[2,55],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM}),{11:59,12:60,20:61,24:$Vh,30:110,31:$Vi,44:$V81,45:[1,204],46:203,48:205,89:109,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{24:[1,207]},o($VO,[2,64]),{42:[1,208],47:$V91},o($Va1,[2,174]),{35:[1,210]},{11:59,12:60,20:61,24:$Vh,30:211,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($VO,[2,128]),o($VS,[2,168]),{10:[1,214],37:212,38:[1,213],44:$Vb1},o($Vc1,[2,48]),o($Vc1,[2,49]),o($Vc1,[2,50]),o($Vc1,[2,51]),o($Vc1,[2,52]),{10:[1,216],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},{37:217,38:[1,218],44:$Vb1},{10:[1,219],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},{40:$Vy,62:220},{40:$Vy,62:221},{11:59,12:60,20:61,24:$Vh,30:222,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($V11,[2,89]),{11:59,12:60,20:61,24:$Vh,30:223,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:224,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:225,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($Vd1,[2,87],{38:[1,226]}),o($Vd1,[2,88],{38:[1,227]}),{11:59,12:60,20:61,24:$Vh,30:228,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{40:[1,229]},{11:59,12:60,20:61,24:$Vh,30:231,31:$Vi,44:$Vj,58:230,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{25:[1,232]},{25:[2,93],47:[1,233]},o($Ve1,[2,125]),{35:[1,234]},{31:$Vf1,115:235,116:236},{11:59,12:60,20:61,24:$Vh,30:238,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($VU,[2,130],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM}),{42:[1,239],47:$V91},{45:[1,240],47:[1,241]},o($VW,[2,43]),o($Vg1,[2,45]),{11:59,12:60,20:61,24:$Vh,30:110,31:$Vi,44:$V81,45:$Vh1,48:242,89:109,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:244,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($VW,[2,57]),{31:$VX,117:245},{11:59,12:60,20:61,24:$Vh,30:246,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{25:[1,247],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},{10:[1,249],38:[1,248],44:$Vi1},{11:59,12:60,20:61,24:$Vh,30:252,31:$Vi,40:[1,251],44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($Vg,[2,33]),{45:[1,253]},o($Vg,[2,34]),{38:[1,254],44:$Vi1},{11:59,12:60,20:61,24:$Vh,30:255,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($Vg,[2,39]),o($Vg,[2,69],{63:256,64:[1,257]}),o($Vg,[2,70]),{25:[1,258],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},{10:[1,259],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},{25:[1,260],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},{25:[1,261],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},{11:59,12:60,20:61,24:$Vh,30:262,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{11:59,12:60,20:61,24:$Vh,30:263,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{10:[2,84],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},{68:264,70:265,71:$Vj1},{25:[1,267],47:[1,268]},o($Ve1,[2,61],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM}),{35:$Vk1,40:$Vl1,82:269},{31:$V31,88:271},{31:$VY,36:272,49:$VZ,50:$V_,51:$V$,52:$V01},{42:[1,273],47:[1,274]},o($Va1,[2,171]),{35:[1,275]},{10:[2,176],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},o($VW,[2,54]),o($VW,[2,42]),{44:$Vm1,48:276},{45:[1,278]},o($Vg1,[2,47]),{25:[1,279],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},o($Va1,[2,173]),o($Va1,[2,175],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM}),o($VO,[2,63]),{11:59,12:60,20:61,24:$Vh,30:281,31:$Vi,39:280,44:$VV,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},o($Vg,[2,31]),{45:[1,282]},{31:$VX,41:283,117:169},{10:[1,284],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},o($Vn1,[2,41]),{11:59,12:60,20:61,24:$Vh,30:286,31:$Vi,39:285,44:$VV,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{10:[1,287],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},o($Vg,[2,66]),{8:288,40:$Vy,61:$V9,62:289},{10:[1,290]},{9:292,31:[1,293],75:291},{40:$Vy,62:294},{40:$Vy,62:295},{10:[2,82],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},{10:[2,83],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},{42:[2,77],69:296,70:297,71:$Vj1,72:[1,298]},o($Vo1,[2,74]),{11:59,12:60,20:61,24:$Vh,30:299,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{10:[1,300]},{11:59,12:60,20:61,24:$Vh,30:301,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{40:[1,302]},{31:$VY,36:303,49:$VZ,50:$V_,51:$V$,52:$V01},o($Ve1,[2,124]),o($Ve1,[2,127],{37:304,44:$Vb1}),{10:[2,169]},{31:$Vf1,116:305},{31:$VY,36:306,49:$VZ,50:$V_,51:$V$,52:$V01},o($Vg1,[2,44]),{44:$Vm1,45:$Vh1,48:242},o($Vg1,[2,46]),o($VO,[2,62]),{10:[1,307]},{10:[1,308],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},o($Vn1,[2,40]),{42:[1,309],47:$V91},o($Vg,[2,32]),{10:[1,310]},{10:[1,311],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},o($Vg,[2,38]),o($Vg,[2,67]),o($Vg,[2,68]),o($Vg,[2,71]),{25:[1,312]},{25:[2,79]},{32:[1,313],33:[1,314],38:$Vu,44:$Vv,53:315,54:$Vw,56:$Vp1,113:71},o($Vg,[2,85]),o($Vg,[2,86]),{42:[1,317]},o($Vo1,[2,73]),{35:[1,318]},{35:[1,319],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM},o($Vg,[2,59]),o($Ve1,[2,60],{90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM}),{7:322,8:323,9:324,11:325,12:326,13:327,14:328,15:329,16:330,17:331,19:333,20:334,21:335,22:336,23:$Vq1,26:$Vr1,27:$Vs1,28:$Vt1,31:$Vu1,34:$V6,43:$V7,55:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Vv1,83:320,85:321,86:332,114:$Vf},{40:[2,95]},o($Ve1,[2,126],{44:$Vi1}),o($Va1,[2,170]),o($Va1,[2,172]),o($Vg,[2,28]),o($Vg,[2,29]),{10:[1,343]},o($Vg,[2,36]),o($Vg,[2,37]),{40:$Vy,62:344},{25:[2,80]},{25:[2,81]},{38:$VP,44:$Vv,56:$Vp1,113:115},{31:$VR},o($Vg,[2,72]),{2:$V0,4:345,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,27:$V3,28:$V4,31:$V5,34:$V6,43:$V7,55:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,114:$Vf},{2:$V0,4:346,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,27:$V3,28:$V4,31:$V5,34:$V6,43:$V7,55:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,114:$Vf},{7:322,8:323,9:324,11:325,12:326,13:327,14:328,15:329,16:330,17:331,19:333,20:334,21:335,22:336,23:$Vq1,26:$Vr1,27:$Vs1,28:$Vt1,31:$Vu1,34:$V6,42:[1,347],43:$V7,55:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Vv1,85:348,86:332,114:$Vf},o($Vw1,[2,98]),o($Vw1,[2,99]),o($Vw1,[2,100]),{10:[1,349]},{10:[1,350]},{10:[1,351]},o($Vw1,[2,104]),o($Vw1,[2,105]),o($Vw1,[2,106]),o($Vw1,[2,107]),o($Vw1,[2,108]),o($Vw1,[2,109]),{10:[1,352]},{10:[1,353]},o($Vw1,[2,112]),o($Vw1,[2,113]),{24:[1,354]},{10:[1,355]},{10:[1,356]},{10:[1,359],11:59,12:60,20:61,24:$Vh,29:357,30:358,31:$Vi,44:$Vj,90:$Vk,104:$Vl,105:50,106:$Vm,107:$Vn,108:$Vo,109:$Vp,110:$Vq,111:$Vr,112:$Vs},{24:$Vt,32:[1,360],33:[1,361],38:$Vu,44:$Vv,53:66,54:$Vw,56:$Vx,113:71},{31:[1,363],87:362},o($Vg,[2,30]),o($Vg,[2,78]),{2:$V0,6:36,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,27:$V3,28:$V4,31:$V5,34:$V6,42:[2,76],43:$V7,55:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,114:$Vf},o($Vo1,[2,75],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,6:36,2:$V0,23:$V1,26:$V2,27:$V3,28:$V4,31:$V5,34:$V6,43:$V7,55:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Ve,114:$Vf}),o($Vg,[2,91]),o($Vw1,[2,97]),o($Vw1,[2,101]),o($Vw1,[2,102]),o($Vw1,[2,103]),o($Vw1,[2,110]),o($Vw1,[2,111]),{25:[1,364]},o($Vw1,[2,115]),o($Vw1,[2,116]),{10:[1,365]},{10:[1,366],90:$Vz,91:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,118:$VN},o($Vw1,[2,119]),{10:[1,367]},{10:[1,368]},{24:[1,369]},{24:[2,123]},o($Vw1,[2,114]),o($Vw1,[2,117]),o($Vw1,[2,118]),o($Vw1,[2,120]),o($Vw1,[2,121]),{25:$V21,31:$V31,81:370,84:196,88:197},{25:[1,371]},{35:$Vk1,40:$Vl1,82:372},{40:[1,373]},{7:322,8:323,9:324,11:325,12:326,13:327,14:328,15:329,16:330,17:331,19:333,20:334,21:335,22:336,23:$Vq1,26:$Vr1,27:$Vs1,28:$Vt1,31:$Vu1,34:$V6,43:$V7,55:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Vv1,83:374,85:321,86:332,114:$Vf},{7:322,8:323,9:324,11:325,12:326,13:327,14:328,15:329,16:330,17:331,19:333,20:334,21:335,22:336,23:$Vq1,26:$Vr1,27:$Vs1,28:$Vt1,31:$Vu1,34:$V6,42:[1,375],43:$V7,55:$V8,61:$V9,65:$Va,66:$Vb,67:$Vc,73:$Vd,79:$Vv1,85:348,86:332,114:$Vf},o($Vw1,[2,122])],
defaultActions: {35:[2,1],83:[2,92],273:[2,169],292:[2,79],303:[2,95],313:[2,80],314:[2,81],363:[2,123]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { ListaInstruccionesT } = require('../ListaInstrucciones');    
    const { ListaGlobalesT } = require('../ListaGlobales');        

    /*----------------------------------------------- EXPRESIONES --------------------------------------------------------------*/
    const { ExpresionBinariaT } = require('../Expresion/ExpresionBinaria');
    const { LiteralT } = require('../Expresion/Literal');
    const { ExpresionUnariaT } = require('../Expresion/ExpresionUnaria');
    const { NativaArregloT } = require('../Instruccion/NativaArreglo');
    const { TernarioT } = require('../Instruccion/TernarioT');


    /*----------------------------------------------- INSTRUCCIONES --------------------------------------------------------------*/
    const { DeclaracionT } = require('../Instruccion/Declaracion');
    const { AsignacionT } = require('../Instruccion/Asignacion');   
    const { FuncionT } = require('../Instruccion/Funcion'); 
    const { LlamadaFuncionT } = require('../Instruccion/LlamadaFuncion'); 
    const { Arreglo2T } = require('../Instruccion/Arreglo2');
    const { ConsoleT } = require('../Instruccion/Console');
    const { ForInOf } = require('../Instruccion/ForInOf');
    const { IncrementoT } = require('../Instruccion/IncrementoT');
    const { AsignacionArrayT } = require('../Instruccion/AsignacionArray');
    const { AsignacionTypeT } = require('../Instruccion/AsignacionType');

    /*--------------------------------------------- SENTENCIAS DE CONTROL --------------------------------------------------------------*/

    const { BloqueInstruccionesT } = require('../Instruccion/BloqueInstrucciones'); 
    const { IfT } = require('../Instruccion/If'); 
    const { WhileT } = require('../Instruccion/While'); 
    const { SwitchT } = require('../Instruccion/Switch');     
    const { CaseT } = require('../Instruccion/Case'); 
    const { SentenciaSalidaT } = require('../Instruccion/SentenciaSalida'); 

    /*----------------------------------------------- ARREGLOS Y TYPES  --------------------------------------------------------------*/

    const { AccesoT } = require('../Expresion/Acceso'); 
    const { AtrTypeT } = require('../Instruccion/AtrType'); 
    const { TypeT } = require('../Instruccion/Type'); 
    const { VariableTypeT } = require('../Instruccion/VariableType'); 
    const { IdAccesoT } = require('../Instruccion/IdAcceso'); 

    /*---------------------------------------------------   ERRORES  --------------------------------------------------------------*/
    const { Error_ } = require("../../Error/Error.ts");
    const { errores } = require("../../Error/Errores.ts");

    let funcionesAnidadas = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 106
break;
case 4:return 107
break;
case 5:return 108
break;
case 6:return 109
break;
case 7:return 92
break;
case 8:return 93
break;
case 9:return 95
break;
case 10:return 54
break;
case 11:return 32
break;
case 12:return 33
break;
case 13:return 90
break;
case 14:return 91
break;
case 15:return '^'
break;
case 16:return 94
break;
case 17:return 97
break;
case 18:return 99
break;
case 19:return 96
break;
case 20:return 98
break;
case 21:return 100
break;
case 22:return 101
break;
case 23:return 38
break;
case 24:return 103
break;
case 25:return 102
break;
case 26:return 104
break;
case 27:return 24
break;
case 28:return 25 
break;
case 29:return 40
break;
case 30:return 42
break;
case 31:return 10
break;
case 32:return 35
break;
case 33:return 44
break;
case 34:return 45
break;
case 35:return 47
break;
case 36:return 56
break;
case 37:return '`'
break;
case 38:return '$'
break;
case 39:return 118
break;
case 40:return '"'
break;
case 41:return '\''
break;
case 42:return 61
break;
case 43:return 64
break;
case 44:return 67
break;
case 45:return 71
break;
case 46:return 72
break;
case 47:return 65
break;
case 48:return 66
break;
case 49:return 73
break;
case 50:return 77
break;
case 51:return 78
break;
case 52:return 110
break;
case 53:return 111
break;
case 54:return 28
break;
case 55:return 26
break;
case 56:return 27
break;
case 57:return 79
break;
case 58:return 34
break;
case 59:return 43
break;
case 60:return 55
break;
case 61:return 57
break;
case 62:return 23
break;
case 63:return 59
break;
case 64:return 'POP'
break;
case 65:return 60
break;
case 66:return 52
break;
case 67:return 49
break;
case 68:return 50
break;
case 69:return 51
break;
case 70:return 114
break;
case 71:return 112
break;
case 72:return 31;
break;
case 73:return 5
break;
case 74: 
    let error_lexico = new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico', yy_.yytext);
    errores.push(error_lexico);
    
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:(([0-9]+)\.([0-9]+)))/,/^(?:([0-9]+))/,/^(?:(("[^"]*")))/,/^(?:(('[^']*')))/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?:`)/,/^(?:\$)/,/^(?:\?)/,/^(?:")/,/^(?:\\')/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:function\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:void\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}